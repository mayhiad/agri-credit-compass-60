
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { corsHeaders } from "../process-saps-document/cors.ts";
import * as pdf from "https://deno.land/x/pdfjs@v0.1.2/mod.ts";

const API_TIMEOUT = 180000; // 3 perc

serve(async (req) => {
  // CORS kezel√©se
  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });

  try {
    console.log("üì• Claude AI feldolgoz√°s ind√≠t√°sa");
    
    const formData = await req.formData();
    const file = formData.get('file') as File;
    
    if (!file) throw new Error('Nem √©rkezett f√°jl');
    console.log("üìÑ F√°jl fogadva:", file.name, "m√©ret:", file.size, "t√≠pus:", file.type);
    
    // Felhaszn√°l√≥i azonos√≠t√≥ kinyer√©se a JWT tokenb≈ël
    let userId = 'debug_user';
    
    const authHeader = req.headers.get('authorization');
    if (authHeader && authHeader.startsWith('Bearer ')) {
      try {
        const token = authHeader.split(' ')[1];
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map((c) => {
          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        
        const payload = JSON.parse(jsonPayload);
        if (payload.sub) {
          userId = payload.sub;
          console.log("üë§ Felhaszn√°l√≥ azonos√≠tva:", userId);
        }
      } catch (jwtError) {
        console.warn("‚ö†Ô∏è Nem siker√ºlt a JWT tokent feldolgozni:", jwtError);
      }
    }

    // F√°jl tartalm√°nak kinyer√©se
    const fileBuffer = await file.arrayBuffer();
    const fileText = await extractTextFromDocument(fileBuffer, file.name);
    
    console.log(`üìù Dokumentum sz√∂vege kinyerve, hossza: ${fileText.length} karakter`);
    
    // Claude API h√≠v√°s a sz√∂veg feldolgoz√°s√°hoz
    const extractedData = await processWithClaudeAPI(fileText);
    
    console.log("‚úÖ Claude feldolgoz√°s k√©sz:", JSON.stringify(extractedData));

    return new Response(JSON.stringify({
      success: true,
      data: extractedData
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
    
  } catch (error) {
    console.error("üî• V√©gs≈ë hibakezel√©s:", error);
    
    let errorMessage = "Ismeretlen hiba t√∂rt√©nt";
    let errorDetails = "";
    let errorStack = "";
    
    if (error instanceof Error) {
      errorMessage = error.message;
      errorDetails = error.toString();
      errorStack = error.stack || "";
    } else if (typeof error === 'string') {
      errorMessage = error;
    } else if (error && typeof error === 'object') {
      errorMessage = JSON.stringify(error);
    }
    
    return new Response(JSON.stringify({ 
      error: errorMessage, 
      details: errorDetails,
      stack: errorStack
    }), { 
      status: 500, 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    });
  }
});

// Sz√∂veg kinyer√©se a dokumentumb√≥l (PDF vagy m√°s form√°tum)
async function extractTextFromDocument(fileBuffer: ArrayBuffer, fileName: string): Promise<string> {
  const fileExtension = fileName.split('.').pop()?.toLowerCase();
  
  if (fileExtension === 'pdf') {
    try {
      // PDF feldolgoz√°s
      const pdfDocument = await pdf.getPdfDocument(new Uint8Array(fileBuffer));
      let allText = '';
      
      // Oldalank√©nt kinyerj√ºk a sz√∂veget
      for (let i = 1; i <= pdfDocument.numPages; i++) {
        const page = await pdfDocument.getPage(i);
        const textContent = await page.getTextContent();
        const pageText = textContent.items
          .map((item: any) => item.str)
          .join(' ');
        
        allText += pageText + '\n\n';
      }
      
      return allText;
    } catch (error) {
      console.error("PDF feldolgoz√°si hiba:", error);
      return "PDF feldolgoz√°si hiba: " + (error instanceof Error ? error.message : String(error));
    }
  } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {
    // Excel eset√©n egyszer≈± √ºzenet
    return "Excel dokumentum, r√©szletes sz√∂veges tartalom nem √°ll rendelkez√©sre.";
  } else {
    // Egy√©b form√°tumok
    try {
      const decoder = new TextDecoder('utf-8');
      return decoder.decode(fileBuffer);
    } catch (error) {
      console.error("Sz√∂veg dek√≥dol√°si hiba:", error);
      return "Sz√∂veg dek√≥dol√°si hiba: " + (error instanceof Error ? error.message : String(error));
    }
  }
}

// Claude API h√≠v√°s a sz√∂vegfeldolgoz√°shoz
async function processWithClaudeAPI(documentText: string) {
  const CLAUDE_API_KEY = Deno.env.get('CLAUDE_API_KEY');
  
  if (!CLAUDE_API_KEY) {
    throw new Error('Claude API kulcs nincs be√°ll√≠tva');
  }
  
  try {
    const prompt = `
Elemezd a k√∂vetkez≈ë SAPS dokumentumot √©s nyerd ki bel≈ële a gazd√°lkod√≥ adatait.

SAPS dokumentum tartalma:
${documentText.substring(0, 15000)}

A FELADAT: A dokumentumb√≥l CSAK a k√∂vetkez≈ë inform√°ci√≥kat kell kinyerned:
1. A gazd√°lkod√≥ (k√©relmez≈ë) neve
2. A gazd√°lkod√≥ (k√©relmez≈ë) azonos√≠t√≥sz√°ma (10 jegy≈± sz√°m)
3. A bead√≥/beny√∫jt√≥ azonos√≠t√≥sz√°ma (ha k√ºl√∂nb√∂zik a k√©relmez≈ë√©t≈ël)

K√ñVETELM√âNYEK:
1. CSAK a fenti adatokat keresd, semmi m√°st!
2. Ha nem tal√°lod a pontos adatokat, akkor √≠rd, hogy "ismeretlen" vagy "nem tal√°lhat√≥"
3. NE TAL√ÅLJ KI ADATOKAT! Csak a dokumentumban t√©nylegesen szerepl≈ë inform√°ci√≥kat haszn√°ld!

Az adatokat a k√∂vetkez≈ë JSON form√°tumban add vissza:
{
  "applicantName": "A gazd√°lkod√≥ neve vagy 'ismeretlen'",
  "documentId": "10 jegy≈± azonos√≠t√≥ vagy 'ismeretlen'",
  "submitterId": "10 jegy≈± bead√≥i azonos√≠t√≥ vagy 'ismeretlen' (ha ugyanaz, mint a k√©relmez≈ë√©, akkor is add meg)"
}

FIGYELEM! Csak a k√©rt JSON form√°tumban v√°laszolj, m√°s sz√∂veg vagy magyar√°zat n√©lk√ºl!
`;

    console.log("ü§ñ Claude API h√≠v√°s el≈ëk√©sz√≠t√©se...");
    
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: "claude-3-haiku-20240307",
        max_tokens: 1000,
        messages: [
          {
            role: "user",
            content: prompt
          }
        ]
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Claude API hiba: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    const result = await response.json();
    console.log("ü§ñ Claude API v√°lasz:", JSON.stringify(result));
    
    if (result.content && result.content.length > 0) {
      const aiResponse = result.content[0].text;
      
      // Pr√≥b√°ljuk meg JSON-k√©nt √©rtelmezni a v√°laszt
      try {
        // Keress√ºk meg az els≈ë JSON objektumot a v√°laszban
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const extractedJson = JSON.parse(jsonMatch[0]);
          return {
            ...extractedJson,
            hectares: 0,
            cultures: [],
            blockIds: [],
            totalRevenue: 0,
            region: ""
          };
        }
      } catch (jsonError) {
        console.error("JSON feldolgoz√°si hiba:", jsonError);
      }
      
      // Ha nem siker√ºlt JSON-k√©nt √©rtelmezni, adjunk vissza egy alap objektumot
      return {
        applicantName: "Ismeretlen gazd√°lkod√≥",
        documentId: "0000000000",
        submitterId: "0000000000",
        hectares: 0,
        cultures: [],
        blockIds: [],
        totalRevenue: 0,
        region: ""
      };
    }
    
    throw new Error("Nem siker√ºlt feldolgozni a Claude v√°laszt");
    
  } catch (error) {
    console.error("Claude API hiba:", error);
    throw error;
  }
}
