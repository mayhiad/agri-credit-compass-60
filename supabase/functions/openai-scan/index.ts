
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import OpenAI from 'https://esm.sh/openai@4.38.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ OpenAI Scan Function Started');
    
    // Log request details for debugging
    console.log('Request URL:', req.url);
    console.log('Request Method:', req.method);
    console.log('Request Headers:', JSON.stringify(Object.fromEntries(req.headers.entries()), null, 2));

    // Get OpenAI API key from environment
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (!openaiApiKey) {
      console.error('‚ùå OpenAI API Key is missing');
      return new Response(JSON.stringify({ error: 'OpenAI API Key is not configured' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('üîë OpenAI API Key status: Configured');

    // Initialize OpenAI client
    const openai = new OpenAI({
      apiKey: openaiApiKey,
      defaultHeaders: { 'OpenAI-Beta': 'assistants=v2' }
    });

    // Parse incoming form data
    const formData = await req.formData();
    const file = formData.get('file') as File;

    if (!file) {
      console.error('‚ùå No file uploaded');
      return new Response(JSON.stringify({ error: 'No file uploaded' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log(`üìÑ File received: ${file.name}, Size: ${file.size} bytes, Type: ${file.type}`);

    // Convert file to ArrayBuffer
    const fileBuffer = await file.arrayBuffer();

    // Detailed logging of file upload attempt
    console.log('üö¢ Attempting to upload file to OpenAI');
    const fileUploadStart = Date.now();

    try {
      // Use existing assistant instead of creating a new one
      const assistantId = "asst_O4mDtAf0vkjjbm4hUbB0gTD4";
      console.log(`‚úÖ Using existing assistant ID: ${assistantId}`);

      // Upload file to OpenAI
      const uploadedFile = await openai.files.create({
        file: new File([fileBuffer], file.name, { type: file.type || 'application/pdf' }),
        purpose: "assistants"
      });

      const fileUploadTime = Date.now() - fileUploadStart;
      console.log(`‚úÖ File uploaded successfully (${fileUploadTime}ms). File ID: ${uploadedFile.id}`);

      // Create a thread
      const thread = await openai.beta.threads.create();
      console.log(`‚úÖ Thread created. ID: ${thread.id}`);
      
      // Add a message to the thread WITHOUT the file attached (per OpenAI v2 API)
      console.log(`üì§ Creating message with instructions (without file attachment)`);
      
      const messageContent = `
KRITIKUSAN FONTOS! OLVASD EL FIGYELMESEN √âS K√ñVESD PONTOSAN AZ UTAS√çT√ÅSOKAT!

SAPS mez≈ëgazdas√°gi dokumentum feldolgoz√°sa: Feladatod a felt√∂lt√∂tt dokumentumb√≥l automatikusan kinyerni √©s struktur√°lni a mez≈ëgazdas√°gi adatokat.

ALAPVET≈ê K√ñVETELM√âNY:
- Ne tal√°lj ki adatokat! Ha nem tal√°lod meg a dokumentumban, hagyd √ºresen vagy null√°ra √°ll√≠tva
- Sose gener√°lj v√©letlenszer≈± adatokat!
- Ha nem tudsz kinyerni minden adatot, akkor is jelezd, hogy mely adatokat siker√ºlt kinyerned

A k√∂vetkez≈ë adatokat kell kinyerned:
1. Gazd√°lkod√≥ neve (applicantName)
2. Dokumentum azonos√≠t√≥ (documentId): minden SAPS dokumentumnak van egyedi azonos√≠t√≥ja
3. R√©gi√≥ (region): Megye vagy telep√ºl√©s
4. √âv (year): Amely √©vre a dokumentum vonatkozik
5. √ñsszes f√∂ldter√ºlet hekt√°rban (hectares) - CSAK POZIT√çV SZ√ÅMOK LEHETNEK!
6. N√∂v√©nykult√∫r√°k adatai - CSAK POZIT√çV SZ√ÅMOK LEHETNEK!
   - Kult√∫ra neve (name): pl. b√∫za, kukorica, napraforg√≥
   - Ter√ºlete hekt√°rban (hectares): CSAK POZIT√çV SZ√ÅMOK LEHETNEK!
   - Becs√ºlt term√©s√°tlag (yieldPerHectare): t/ha - CSAK POZIT√çV SZ√ÅMOK LEHETNEK!
   - Becs√ºlt egys√©g√°r (pricePerTon): Ft/t - CSAK POZIT√çV SZ√ÅMOK LEHETNEK!
   - Becs√ºlt bev√©tel (estimatedRevenue): hectares √ó yieldPerHectare √ó pricePerTon
7. Blokkazonos√≠t√≥k (blockIds): a dokumentumban tal√°lhat√≥ egyedi azonos√≠t√≥k

V√°rhat√≥ JSON form√°tum:
{
  "applicantName": "string vagy null, ha nem tal√°lhat√≥",
  "documentId": "string vagy null, ha nem tal√°lhat√≥",
  "region": "string vagy null, ha nem tal√°lhat√≥",
  "year": "string vagy null, ha nem tal√°lhat√≥",
  "hectares": number > 0 vagy 0, ha nem tal√°lhat√≥,
  "cultures": [
    {
      "name": "string",
      "hectares": number > 0,
      "yieldPerHectare": number > 0,
      "pricePerTon": number > 0,
      "estimatedRevenue": number > 0
    }
  ],
  "blockIds": ["string"] vagy [], ha nem tal√°lhat√≥,
  "totalRevenue": number > 0 vagy 0, ha nem tal√°lhat√≥
}

Ha egy√°ltal√°n nem siker√ºl adatokat kinyerned, adj vissza egy √ºres objektumot:
{
  "applicantName": null,
  "documentId": null,
  "region": null,
  "year": null,
  "hectares": 0,
  "cultures": [],
  "blockIds": [],
  "totalRevenue": 0
}

FONTOS: Ha a dokumentumban nem tal√°lhat√≥k n√∂v√©nykult√∫r√°k adatai legal√°bb 10 hekt√°r √∂sszes ter√ºlettel, vagy nem lehet kinyerni a f≈ë mez≈ëgazdas√°gi adatokat, akkor az adatkinyer√©s sikertelennek tekintend≈ë. Ilyen esetben jelezd, hogy sikertelen volt az adatkinyer√©s.`;
      
      // Create message without file attachment
      const message = await openai.beta.threads.messages.create(thread.id, {
        role: "user",
        content: messageContent
      });
      
      console.log(`‚úÖ Message created with ID: ${message.id}`);
      
      // Run the assistant on the thread WITH file attachment in the run itself (per OpenAI v2 API)
      console.log(`üèÉ Starting run with assistant ID: ${assistantId} and file ID: ${uploadedFile.id}`);
      const runStart = Date.now();
      
      // Using correct v2 API structure: pass file in tool_resources
      const run = await openai.beta.threads.runs.create(
        thread.id,
        { 
          assistant_id: assistantId,
          tool_resources: {
            file_search: {
              file_ids: [uploadedFile.id]
            }
          }
        }
      );
      
      console.log(`‚úÖ Run created. ID: ${run.id}`);
      
      // Return successful response with details (we're not waiting for completion in this function)
      return new Response(JSON.stringify({ 
        message: 'Document processing started', 
        fileId: uploadedFile.id,
        assistantId: assistantId,
        threadId: thread.id,
        runId: run.id,
        status: 'processing'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });

    } catch (uploadError) {
      console.error('‚ùå Upload process error:', JSON.stringify({
        status: uploadError.status,
        message: uploadError.message,
        type: uploadError.type,
        code: uploadError.code,
        param: uploadError.param,
        details: uploadError
      }));

      return new Response(JSON.stringify({ 
        error: 'Failed to process document', 
        details: uploadError.message,
        code: uploadError.code,
        param: uploadError.param
      }), {
        status: uploadError.status || 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

  } catch (error) {
    console.error('üî• Unhandled error in OpenAI Scan Function:', error);

    return new Response(JSON.stringify({ 
      error: 'Internal server error', 
      details: error.message,
      fullError: error
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
