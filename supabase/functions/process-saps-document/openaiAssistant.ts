
import OpenAI from "https://esm.sh/openai@4.38.0";
import { getErrorDetails } from "./openaiClient.ts";

// OpenAI kliens inicializ√°l√°sa
const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const openai = new OpenAI({
  apiKey: openAIApiKey,
  defaultHeaders: { 'OpenAI-Beta': 'assistants=v2' }
});

// Asszisztens l√©trehoz√°sa (opcion√°lisan egyszer, majd assistantId ment√©s .env-be)
export async function createAssistant() {
  console.log("ü§ñ Asszisztens l√©trehoz√°sa...");
  const start = Date.now();

  try {
    const assistant = await openai.beta.assistants.create({
      name: "SAPS Dokumentum Elemz≈ë",
      model: "gpt-4o-mini",
      tools: [{ type: "file_search" }],
      instructions: `
Olvasd ki a dokumentumb√≥l a gazd√°lkod√≥ nev√©t, az iratazonos√≠t√≥sz√°mot, a k√©relmez≈ë √ºgyf√©l (gazd√°lkod√≥) √ºgyf√©l-azonos√≠t√≥ sz√°m√°t. Keresd meg a dokumentum azon r√©sz√©t, amelyben az elm√∫lt √∂t √©v historikus gazd√°lkod√°si adatait l√°tjuk, azaz, hogy mekkora ter√ºleten milyen n√∂v√©nykult√∫r√°t termelt. Rendezd ezt t√°bl√°zatba, dolgozd fel ezeket az adatokat √©s p√°ros√≠ts mell√© az azokban az √©vekben nyilv√°nosan el√©rhet≈ë kult√∫r√°hoz tartoz√≥ vil√°gpiaci √°tlag√°rat, szorozd fel a ter√ºleteken az adott √©vekben, adott r√©gi√≥ban elv√°rhat√≥ term√©s√°tlaggal, ez√°ltal becs√ºld meg az adott √©vekben termelt √°rbev√©telt. Majd keresd meg az √∂sszes√≠t≈ë t√°bl√°zatot, amely a t√°rgy√©vre vonatkozik; olvasd be ugyan√≠gy a ter√ºletek m√©ret√©t √©s az adott ter√ºleteken el≈ë√°ll√≠tott kult√∫r√°t, becs√ºld meg a ter√ºleten az elm√∫lt √∂t √©v term√©s√°tlag√°t v√©ve a v√°rhat√≥ term√©shozamot (tonna), √©s szorozd fel a most aktu√°lis, vagy az arat√°skor v√°rhat√≥ vil√°gpiaci √°tlag√°rral. √çgy megkapjuk a t√°rgy√©vi, j√∂v≈ëbeni v√°rhat√≥ √°rbev√©telt. Rendezd strukt√∫r√°ltan, feldolgozhat√≥an.

Haszn√°ld az al√°bbi becs√ºlt adatokat az √°rbev√©tel sz√°m√≠t√°shoz:
- ≈êszi b√∫za: 6 t/ha, 230 ‚Ç¨/t
- Napraforg√≥: 2,8 t/ha, 450 ‚Ç¨/t
- Kukorica: 8 t/ha, 210 ‚Ç¨/t
- ≈êszi √°rpa: 5,5 t/ha, 200 ‚Ç¨/t
- Repce: 3,3 t/ha, 520 ‚Ç¨/t

Az √°rakat tekintsd eur√≥ban, √©s sz√°m√≠tsd ki minden kult√∫r√°ra √©s √©vre az √©ves √°rbev√©telt, majd az √∂sszes√≠tett √°rbev√©telt is.

K√©rlek, adj vissza egy struktur√°lt t√°bl√°zatot √≠gy:
| Kult√∫ra | Ter√ºlet (ha) | Hozam (t/ha) | √År (‚Ç¨/t) | Term√©s (t) | √Årbev√©tel (‚Ç¨) |

K√©rlek, add vissza JSON form√°tumban a k√∂vetkez≈ë mez≈ëkkel:
{
  "documentId": "IRATAZONOS√çT√ì",
  "applicantName": "GAZD√ÅLKOD√ì NEVE",
  "applicantId": "√úGYF√âL-AZONOS√çT√ì SZ√ÅM",
  "region": "R√âGI√ì",
  "hectares": √ñSSZES TER√úLET HEKT√ÅRBAN,
  "year": "T√ÅRGY√âV",
  "blockIds": ["BLOKKAZONOS√çT√ìK LIST√ÅJA"],
  "cultures": [
    {
      "name": "KULT√öRA NEVE",
      "hectares": KULT√öRA TER√úLETE,
      "estimatedRevenue": BECS√úLT √ÅRBEV√âTEL
    }
  ],
  "totalRevenue": √ñSSZES BECS√úLT √ÅRBEV√âTEL,
  "historicalData": [
    {
      "year": "√âV",
      "totalRevenue": √âVES BECS√úLT √ÅRBEV√âTEL,
      "cultures": [
        {
          "name": "KULT√öRA NEVE",
          "hectares": KULT√öRA TER√úLETE,
          "yield": HOZAM (t/ha),
          "price": √ÅR (‚Ç¨/t),
          "estimatedRevenue": BECS√úLT √ÅRBEV√âTEL
        }
      ]
    }
  ],
  "marketPrices": [
    {
      "culture": "KULT√öRA NEVE",
      "averageYield": √ÅTLAGOS HOZAM (t/ha),
      "price": √ÅR (Ft/t),
      "trend": √ÅRTREND SZ√ÅZAL√âKBAN
    }
  ]
}
`
    });

    const ms = Date.now() - start;
    console.log(`‚úÖ Asszisztens l√©trehozva ${ms}ms alatt: ${assistant.id}`);
    return assistant;
  } catch (error) {
    console.error("‚ùå Hiba az asszisztens l√©trehoz√°sakor:", getErrorDetails(error));
    throw error;
  }
}

// Thread l√©trehoz√°sa
export async function createThread() {
  try {
    const thread = await openai.beta.threads.create();
    console.log(`‚úÖ Thread l√©trehozva: ${thread.id}`);
    return thread;
  } catch (error) {
    console.error("‚ùå Hiba thread l√©trehoz√°skor:", getErrorDetails(error));
    throw error;
  }
}

// √úzenet hozz√°ad√°sa egy threadhez
export async function addMessageToThread(threadId, content = "K√©rlek, dolgozd fel a SAPS dokumentumot!") {
  try {
    const message = await openai.beta.threads.messages.create(threadId, {
      role: "user",
      content
    });
    console.log(`‚úÖ √úzenet l√©trehozva: ${message.id}`);
    return message;
  } catch (error) {
    console.error("‚ùå Hiba az √ºzenet hozz√°ad√°sakor:", getErrorDetails(error));
    throw error;
  }
}

// F√°jl hozz√°ad√°sa a thread-hez √©s futtat√°s ind√≠t√°sa
export async function startRun(threadId, assistantId, fileId) {
  console.log(`üèÉ Feldolgoz√°s ind√≠t√°sa asszisztens ID-val: ${assistantId} √©s f√°jl ID-val: ${fileId}`);
  const runStart = Date.now();
  try {
    // ‚úÖ NE adjunk hozz√° f√°jlt a messages.create()-hez v2-ben!

    const run = await openai.beta.threads.runs.create(threadId, {
      assistant_id: assistantId,
      attachments: [
        {
          file_id: fileId,
          tools: ["file_search"]
        }
      ]
    });

    const runTime = Date.now() - runStart;
    console.log(`‚úÖ Feldolgoz√°s elind√≠tva (${runTime}ms). Run ID: ${run.id}`);
    return run;
  } catch (error) {
    console.error("‚ùå Hiba a futtat√°s l√©trehoz√°sa sor√°n:", getErrorDetails(error));
    throw error;
  }
}
