
import OpenAI from "https://esm.sh/openai@4.38.0";
import { getErrorDetails } from "./openaiClient.ts";

// OpenAI kliens inicializ√°l√°sa
const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const openai = new OpenAI({
  apiKey: openAIApiKey,
  defaultHeaders: { 'OpenAI-Beta': 'assistants=v2' }
});

// Asszisztens l√©trehoz√°sa (opcion√°lisan egyszer, majd assistantId ment√©s .env-be)
export async function createAssistant() {
  console.log("ü§ñ Asszisztens l√©trehoz√°sa...");
  const start = Date.now();

  try {
    const assistant = await openai.beta.assistants.create({
      name: "SAPS Dokumentum Elemz≈ë",
      model: "gpt-4o-mini",
      tools: [
        { type: "file_search" },
        { type: "code_interpreter" }
      ],
      instructions: `
K√©rlek olvasd ki a dokumentumb√≥l a gazd√°lkod√≥ nev√©t. Ez √°ltal√°ban a dokumentum elej√©n, a fejl√©cben vagy az ≈±rlap els≈ë oldal√°n tal√°lhat√≥.

Csak a gazd√°lkod√≥ nev√©t add vissza JSON form√°tumban:
{
  "applicantName": "GAZD√ÅLKOD√ì NEVE"
}
`
    });

    const ms = Date.now() - start;
    console.log(`‚úÖ Asszisztens l√©trehozva ${ms}ms alatt: ${assistant.id}`);
    return assistant;
  } catch (error) {
    console.error("‚ùå Hiba az asszisztens l√©trehoz√°sakor:", getErrorDetails(error));
    throw error;
  }
}

// Thread l√©trehoz√°sa
export async function createThread() {
  console.log("üìù Thread l√©trehoz√°s√°nak kezd√©se...");
  try {
    const thread = await openai.beta.threads.create();
    console.log(`‚úÖ Thread l√©trehozva: ${thread.id}`);
    return thread;
  } catch (error) {
    console.error("‚ùå Hiba thread l√©trehoz√°skor:", getErrorDetails(error));
    throw error;
  }
}

// √úzenet hozz√°ad√°sa egy threadhez
export async function addMessageToThread(threadId, content = "K√©rlek, olvasd ki a gazd√°lkod√≥ nev√©t a dokumentumb√≥l!") {
  console.log(`üì© √úzenet hozz√°ad√°sa a threadhez: ${threadId}, tartalom: "${content}"`);
  try {
    // Rendszer√ºzenet hozz√°ad√°sa a threadhez (ugyanaz, mint a createAssistant instructions)
    const message = await openai.beta.threads.messages.create(threadId, {
      role: "user",
      content: `
K√©rlek olvasd ki a dokumentumb√≥l a gazd√°lkod√≥ nev√©t. Ez √°ltal√°ban a dokumentum elej√©n, a fejl√©cben vagy az ≈±rlap els≈ë oldal√°n tal√°lhat√≥.

Csak a gazd√°lkod√≥ nev√©t add vissza JSON form√°tumban:
{
  "applicantName": "GAZD√ÅLKOD√ì NEVE"
}
`
    });
    console.log(`‚úÖ √úzenet l√©trehozva: ${message.id}`);
    return message;
  } catch (error) {
    console.error("‚ùå Hiba az √ºzenet hozz√°ad√°sakor:", getErrorDetails(error));
    throw error;
  }
}

// F√°jl hozz√°ad√°sa a thread-hez √©s futtat√°s ind√≠t√°sa
export async function startRun(threadId, assistantId, fileId) {
  console.log(`üèÉ Feldolgoz√°s ind√≠t√°sa - Thread ID: ${threadId}, Asszisztens ID: ${assistantId}, F√°jl ID: ${fileId}`);
  
  // Ellen≈ërizz√ºk a file ID form√°tum√°t
  if (!fileId.startsWith('file-')) {
    console.warn(`‚ö†Ô∏è FIGYELEM: A fileId (${fileId}) nem a v√°rt "file-" form√°tumban van. Ez probl√©m√°t okozhat a feldolgoz√°s sor√°n.`);
  } else {
    console.log(`‚úì File ID form√°tum megfelel≈ë: ${fileId}`);
  }
  
  const runStart = Date.now();
  
  try {
    // Adjuk hozz√° a f√°jlt a threadhez
    console.log(`üìé F√°jl hozz√°ad√°sa (${fileId}) az √ºzenethez a threadben (${threadId})...`);
    const messageWithFile = await openai.beta.threads.messages.create(threadId, {
      role: "user",
      content: "K√©rlek, olvasd ki a gazd√°lkod√≥ nev√©t a dokumentumb√≥l!",
      file_ids: [fileId]
    });
    console.log(`‚úÖ √úzenet l√©trehozva f√°jllal: ${messageWithFile.id}, F√°jl ID-k: ${JSON.stringify(messageWithFile.file_ids)}`);
    
    // Ind√≠tsuk el a futtat√°st, de ne adjunk meg k√ºl√∂n file_ids-t itt
    console.log(`üöÄ Futtat√°s ind√≠t√°sa a threaden (${threadId}) az asszisztenssel (${assistantId})...`);
    const run = await openai.beta.threads.runs.create(threadId, {
      assistant_id: assistantId,
      instructions: "Olvasd ki a gazd√°lkod√≥ nev√©t a dokumentumb√≥l JSON form√°tumban."
    });
    
    const runTime = Date.now() - runStart;
    console.log(`‚úÖ Feldolgoz√°s elind√≠tva (${runTime}ms). Run ID: ${run.id}, St√°tusz: ${run.status}`);
    return run;
  } catch (error) {
    console.error("‚ùå Hiba a futtat√°s l√©trehoz√°sa sor√°n:", getErrorDetails(error));
    console.error("‚ùå Hiba r√©szletei:", JSON.stringify(error, null, 2));
    throw error;
  }
}
