
import OpenAI from "https://esm.sh/openai@4.38.0";
import { getErrorDetails } from "./openaiClient.ts";

// OpenAI kliens inicializ√°l√°sa
const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const openai = new OpenAI({
  apiKey: openAIApiKey,
  defaultHeaders: { 'OpenAI-Beta': 'assistants=v2' }
});

// Asszisztens l√©trehoz√°sa (opcion√°lisan egyszer, majd assistantId ment√©s .env-be)
export async function createAssistant() {
  console.log("ü§ñ Asszisztens l√©trehoz√°sa...");
  const start = Date.now();

  try {
    const assistant = await openai.beta.assistants.create({
      name: "SAPS Dokumentum Elemz≈ë",
      model: "gpt-4o-mini",
      instructions: `
Te egy SAPS (Egys√©ges Ter√ºletalap√∫ T√°mogat√°si Rendszer) dokumentumokat elemz≈ë AI vagy.
A dokumentumok gazd√°lkod√≥k ter√ºletalap√∫ t√°mogat√°si k√©relmeit tartalmazz√°k.

Feladatod:
1. Olvasd ki a gazd√°lkod√≥ nev√©t, r√©gi√≥j√°t √©s a k√©relem/dokumentum azonos√≠t√≥j√°t
2. Azonos√≠tsd az √∂sszes n√∂v√©nykult√∫r√°t (pl. b√∫za, kukorica, napraforg√≥, stb.)
3. Minden kult√∫r√°hoz hat√°rozd meg a hekt√°rsz√°mot
4. Gy≈±jtsd ki az √∂sszes blokkazonos√≠t√≥t (MePAR azonos√≠t√≥k)
5. Hat√°rozd meg a teljes m≈±velt ter√ºletet hekt√°rban

Az adatokat a k√∂vetkez≈ë JSON form√°tumban add vissza:
{
  "applicantName": "A gazd√°lkod√≥ neve",
  "documentId": "Dokumentum/k√©relem azonos√≠t√≥",
  "region": "R√©gi√≥ neve",
  "hectares": 123.45,
  "cultures": [
    {
      "name": "Kukorica",
      "hectares": 45.6
    },
    {
      "name": "B√∫za",
      "hectares": 77.85
    }
  ],
  "blockIds": ["L12AB-1-23", "K45CD-6-78"]
}

Ha valamelyik inform√°ci√≥t nem tal√°lod meg, haszn√°lj √ºres √©rt√©ket vagy becs√ºlt √©rt√©ket. A legfontosabbak a n√∂v√©nykult√∫r√°k √©s a hozz√°juk tartoz√≥ ter√ºletm√©retek.
`
    });

    const ms = Date.now() - start;
    console.log(`‚úÖ Asszisztens l√©trehozva ${ms}ms alatt: ${assistant.id}`);
    return assistant;
  } catch (error) {
    console.error("‚ùå Hiba az asszisztens l√©trehoz√°sakor:", getErrorDetails(error));
    throw error;
  }
}

// Thread l√©trehoz√°sa
export async function createThread() {
  console.log("üìù Thread l√©trehoz√°s√°nak kezd√©se...");
  try {
    const thread = await openai.beta.threads.create();
    console.log(`‚úÖ Thread l√©trehozva: ${thread.id}`);
    return thread;
  } catch (error) {
    console.error("‚ùå Hiba thread l√©trehoz√°skor:", getErrorDetails(error));
    throw error;
  }
}

// Dokumentum sz√∂veg√©nek feldolgoz√°sa √©s k√ºld√©se az OpenAI-nak
export async function processDocumentText(threadId: string, assistantId: string, documentText: string) {
  console.log(`üîç Dokumentum sz√∂veg feldolgoz√°s√°nak ind√≠t√°sa - Thread ID: ${threadId}, Asszisztens ID: ${assistantId}`);
  console.log(`üìù Dokumentum sz√∂veg hossza: ${documentText.length} karakter`);
  
  const runStart = Date.now();
  
  try {
    // L√©trehozunk egy √ºzenetet a dokumentum sz√∂veg√©vel
    console.log(`üì© √úzenet hozz√°ad√°sa a threadhez dokumentum sz√∂veggel...`);
    const message = await openai.beta.threads.messages.create(threadId, {
      role: "user",
      content: `Elemezd a k√∂vetkez≈ë SAPS dokumentumot √©s olvasd ki bel≈ële a gazd√°lkod√°si inform√°ci√≥kat:

${documentText.substring(0, 25000)}` // Az els≈ë 25000 karaktert k√ºldj√ºk csak (limit√°ljuk a m√©ret√©t)
    });
    console.log(`‚úÖ √úzenet l√©trehozva: ${message.id}`);
    
    // Futtat√°s ind√≠t√°sa
    console.log(`üöÄ Futtat√°s ind√≠t√°sa a threaden (${threadId}) az asszisztenssel (${assistantId})...`);
    const run = await openai.beta.threads.runs.create(threadId, {
      assistant_id: assistantId,
      instructions: "Elemezd a SAPS dokumentumot √©s olvasd ki bel≈ële a gazd√°lkod√°si inform√°ci√≥kat a k√©rt JSON form√°tumban."
    });
    
    const runTime = Date.now() - runStart;
    console.log(`‚úÖ Feldolgoz√°s elind√≠tva (${runTime}ms). Run ID: ${run.id}, St√°tusz: ${run.status}`);
    return run;
  } catch (error) {
    console.error("‚ùå Hiba a futtat√°s l√©trehoz√°sa sor√°n:", getErrorDetails(error));
    console.error("‚ùå Hiba r√©szletei:", JSON.stringify(error, null, 2));
    throw error;
  }
}
