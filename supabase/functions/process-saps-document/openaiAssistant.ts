
import { openai, getErrorDetails } from "./openaiClient.ts";

// Asszisztens l√©trehoz√°sa
export async function createAssistant() {
  console.log("ü§ñ Asszisztens l√©trehoz√°sa...");
  const assistantStart = Date.now();
  
  const assistant = await openai.beta.assistants.create({
    name: "SAPS Dokumentum Elemz≈ë",
    instructions: `Olvasd ki a dokumentumb√≥l a k√∂vetkez≈ë mez≈ëket JSON form√°tumban:
      {
        "hectares": "√ñsszes ter√ºlet hekt√°rban",
        "cultures": [
          {
            "name": "Kult√∫ra neve",
            "hectares": "Kult√∫ra ter√ºlete",
            "estimatedRevenue": "Becs√ºlt √°rbev√©tel"
          }
        ],
        "totalRevenue": "√ñsszes becs√ºlt √°rbev√©tel",
        "region": "Gazdas√°g r√©gi√≥ja",
        "blockIds": ["Blokkazonos√≠t√≥k list√°ja"]
      }`,
    tools: [{ type: "file_search" }],
    model: "gpt-4o-mini"
  }).catch(error => {
    console.error("‚ùå Hiba az asszisztens l√©trehoz√°sa sor√°n:", JSON.stringify({
      status: error.status,
      message: error.message,
      type: error.type,
      code: error.code
    }));
    throw error;
  });
  
  const assistantTime = Date.now() - assistantStart;
  console.log(`‚úÖ Asszisztens l√©trehozva (${assistantTime}ms). ID: ${assistant.id}`);
  
  return assistant;
}

// Thread l√©trehoz√°sa
export async function createThread() {
  console.log("üìù Thread l√©trehoz√°sa...");
  const threadStart = Date.now();
  
  const thread = await openai.beta.threads.create().catch(error => {
    console.error("‚ùå Hiba a thread l√©trehoz√°sa sor√°n:", JSON.stringify({
      status: error.status,
      message: error.message,
      type: error.type,
      code: error.code
    }));
    throw error;
  });
  
  const threadTime = Date.now() - threadStart;
  console.log(`‚úÖ Thread l√©trehozva (${threadTime}ms). ID: ${thread.id}`);
  
  return thread;
}

// √úzenet hozz√°ad√°sa egy threadhez file_id-val
export async function addMessageToThread(threadId: string, fileId: string) {
  console.log(`üì§ √úzenet l√©trehoz√°sa fileId-val: ${fileId}`);
  const messageStart = Date.now();
  
  try {
    const message = await openai.beta.threads.messages.create(threadId, {
      role: "user",
      content: "Olvasd ki a SAPS dokumentum r√©szleteit JSON form√°tumban.",
      file_ids: [fileId]  // Helyesen form√°zott file_ids param√©ter (array)
    });
    
    const messageTime = Date.now() - messageStart;
    console.log(`‚úÖ √úzenet sikeresen l√©trehozva (${messageTime}ms). Message ID: ${message.id}`);
    return message;
  } catch (error) {
    console.error("‚ùå Hiba az √ºzenet l√©trehoz√°sa sor√°n:", JSON.stringify({
      status: error.status,
      message: error.message,
      type: error.type,
      code: error.code
    }));
    throw error;
  }
}

// Futtat√°s ind√≠t√°sa
export async function startRun(threadId: string, assistantId: string) {
  console.log(`üèÉ Feldolgoz√°s ind√≠t√°sa asszisztens ID-val: ${assistantId}`);
  const runStart = Date.now();
  
  const run = await openai.beta.threads.runs.create(threadId, {
    assistant_id: assistantId
  }).catch(error => {
    console.error("‚ùå Hiba a futtat√°s l√©trehoz√°sa sor√°n:", JSON.stringify({
      status: error.status,
      message: error.message,
      type: error.type,
      code: error.code
    }));
    throw error;
  });
  
  const runTime = Date.now() - runStart;
  console.log(`‚úÖ Feldolgoz√°s elind√≠tva (${runTime}ms). Run ID: ${run.id}`);
  
  return run;
}
