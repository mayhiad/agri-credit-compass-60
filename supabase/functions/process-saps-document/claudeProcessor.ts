
// Claude API processor for document extraction
import { encode as base64Encode } from "https://deno.land/std@0.82.0/encoding/base64.ts";

// Claude API constants
const CLAUDE_API_URL = "https://api.anthropic.com/v1/messages";
const CLAUDE_MODEL = "claude-3-opus-20240229";

/**
 * Processes a document with Claude API
 */
export async function processDocumentWithClaude(fileBuffer: ArrayBuffer, fileName: string) {
  console.log(`üß† Claude AI feldolgoz√°s kezd√©se a dokumentumon: ${fileName}`);
  
  try {
    const claudeApiKey = Deno.env.get('ANTHROPIC_API_KEY');
    
    if (!claudeApiKey) {
      throw new Error("ANTHROPIC_API_KEY k√∂rnyezeti v√°ltoz√≥ nincs be√°ll√≠tva");
    }
    
    // Convert file to base64
    const fileContent = base64Encode(new Uint8Array(fileBuffer));
    const fileType = fileName.endsWith('.pdf') ? 'application/pdf' : 'application/octet-stream';
    
    console.log(`üîÑ F√°jl √°talak√≠tva Base64 form√°tumba, m√©ret: ${fileContent.length} karakter`);
    
    // Construct Claude API request
    const payload = {
      model: CLAUDE_MODEL,
      max_tokens: 4000,
      temperature: 0,
      system: "Te egy mez≈ëgazdas√°gi adatok elemz√©s√©re szakosodott asszisztens vagy. Pontosan olvasd ki a dokumentumokb√≥l a k√©rt inform√°ci√≥kat. Ne tal√°lj ki adatokat, √©s ha nem vagy biztos valamiben, ink√°bb hagyd √ºresen. Az eredm√©nyt mindig csak a k√©rt JSON form√°tumban add vissza.",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: "Ez egy mez≈ëgazdas√°gi ter√ºletalap√∫ t√°mogat√°si dokumentum. K√©rlek, keresd meg √©s add vissza JSON form√°tumban a k√∂vetkez≈ë adatokat:\n" +
                    "- submitterName: a bead√≥ neve, amely √°ltal√°ban az els≈ë oldalon tal√°lhat√≥\n" +
                    "- submitterId: a bead√≥ √ºgyf√©l-azonos√≠t√≥ sz√°ma, egy 10 sz√°mjegy≈± sz√°m\n" +
                    "- applicantId: a k√©relmez≈ë √ºgyf√©l-azonos√≠t√≥ sz√°ma, egy 10 sz√°mjegy≈± sz√°m (adott esetben megegyezik a bead√≥ szem√©ly√©vel)\n\n" +
                    "Csak a k√∂vetkez≈ë JSON form√°tumot add vissza: { \"submitterName\": \"...\", \"submitterId\": \"...\", \"applicantId\": \"...\" }"
            },
            {
              type: "image",
              source: {
                type: "base64",
                media_type: fileType,
                data: fileContent
              }
            }
          ]
        }
      ]
    };
    
    console.log(`üöÄ Claude API k√©r√©s k√ºld√©se: ${CLAUDE_API_URL}, model: ${CLAUDE_MODEL}`);
    
    const response = await fetch(CLAUDE_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": claudeApiKey,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Claude API hiba: ${response.status} - ${errorText}`);
      throw new Error(`Claude API hiba: ${response.status} - ${errorText}`);
    }
    
    const result = await response.json();
    console.log(`‚úÖ Claude API v√°lasz meg√©rkezett:`, result);
    
    // Extract the JSON response from Claude's text output
    let extractedData = {};
    let rawText = "";
    
    if (result.content && result.content.length > 0) {
      // The response should be a JSON string
      rawText = result.content[0].text;
      
      try {
        // Try to extract JSON from the text response
        const jsonMatch = rawText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          extractedData = JSON.parse(jsonMatch[0]);
          console.log(`‚úÖ Adatok kinyerve: ${JSON.stringify(extractedData)}`);
        } else {
          console.warn(`‚ö†Ô∏è Nem siker√ºlt JSON adatot kinyerni a v√°laszb√≥l`);
        }
      } catch (parseError) {
        console.error(`‚ùå JSON elemz√©si hiba: ${parseError.message}`);
      }
    }
    
    // Create farm data structure from the extracted data
    const farmData = {
      applicantName: extractedData.submitterName || null,
      documentId: extractedData.submitterId || null,
      submitterId: extractedData.submitterId || null,
      applicantId: extractedData.applicantId || null,
      region: null,
      year: new Date().getFullYear().toString(),
      hectares: 0,
      cultures: [],
      blockIds: [],
      totalRevenue: 0,
      rawText: rawText
    };
    
    return {
      data: farmData,
      rawText: rawText,
      success: true
    };
    
  } catch (error) {
    console.error(`‚ùå Claude feldolgoz√°si hiba: ${error.message}`);
    throw error;
  }
}

