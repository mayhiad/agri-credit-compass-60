
import { batchArray, sortFilesByPageNumber } from "./utils.ts";

export const processAllImageBatches = async (
  imageUrls: string[],
  userId: string,
  batchId: string,
  processingId: string
) => {
  // Maximum number of images to process in a batch
  const MAX_BATCH_SIZE = 20;
  
  // Sort images by page number to ensure we process in page order
  const sortedImageUrls = [...imageUrls];
  
  // Split images into batches
  const batches = batchArray(sortedImageUrls, MAX_BATCH_SIZE);
  console.log(`üß© Split ${imageUrls.length} images into ${batches.length} batches for processing`);
  
  // Process each batch sequentially
  let combinedResult: any = {
    applicantName: "N/A",
    submitterId: "N/A",
    applicantId: "N/A",
    documentId: "N/A",
    year: "N/A",
    submissionDate: "N/A",
    hectares: 0,
    cultures: [],
    blockIds: [],
    totalRevenue: 0,
    historicalYears: []
  };
  
  let rawText = "";
  let finalClaudeResponseUrl = null;
  let batchInfo = {
    totalBatches: batches.length,
    processedBatches: 0,
    processedPages: 0,
    totalPages: imageUrls.length
  };
  
  // Process batches sequentially in order (1-20, 21-40, etc.)
  for (let i = 0; i < batches.length; i++) {
    const batch = batches[i];
    console.log(`‚è≥ Processing batch ${i + 1}/${batches.length} with ${batch.length} images`);
    
    try {
      const batchResult = await processImageBatch(batch, userId, batchId, processingId, i);
      rawText += batchResult.rawText || "";
      
      // Keep track of URLs for Claude responses
      if (batchResult.claudeResponseUrl) {
        finalClaudeResponseUrl = batchResult.claudeResponseUrl;
      }
      
      // Update batch progress info
      batchInfo.processedBatches = i + 1;
      batchInfo.processedPages += batch.length;
      
      // Update combined results
      if (batchResult.data) {
        // Only merge if we have actual data
        if (batchResult.data.applicantName && batchResult.data.applicantName !== "N/A") {
          combinedResult.applicantName = batchResult.data.applicantName;
        }
        
        if (batchResult.data.submitterId && batchResult.data.submitterId !== "N/A") {
          combinedResult.submitterId = batchResult.data.submitterId;
        }
        
        if (batchResult.data.applicantId && batchResult.data.applicantId !== "N/A") {
          combinedResult.applicantId = batchResult.data.applicantId;
        }
        
        if (batchResult.data.documentId && batchResult.data.documentId !== "N/A") {
          combinedResult.documentId = batchResult.data.documentId;
        }
        
        if (batchResult.data.year && batchResult.data.year !== "N/A") {
          combinedResult.year = batchResult.data.year;
        }
        
        if (batchResult.data.submissionDate && batchResult.data.submissionDate !== "N/A") {
          combinedResult.submissionDate = batchResult.data.submissionDate;
        }
        
        // Remove fallback data for hectares
        if (batchResult.data.hectares && batchResult.data.hectares > 0 && !(batchResult.data.hectares === 123.45)) {
          combinedResult.hectares = batchResult.data.hectares;
        }
        
        if (batchResult.data.totalRevenue && batchResult.data.totalRevenue > 0) {
          combinedResult.totalRevenue = batchResult.data.totalRevenue;
        }
        
        if (batchResult.data.blockIds && batchResult.data.blockIds.length > 0) {
          combinedResult.blockIds = [...new Set([...combinedResult.blockIds, ...batchResult.data.blockIds])];
        }
        
        if (batchResult.data.cultures && batchResult.data.cultures.length > 0) {
          // Filter out the fallback culture data
          const validCultures = batchResult.data.cultures.filter(culture => 
            !(culture.name === "Sz√°nt√≥f√∂ldi kult√∫ra" && culture.hectares === 123.45)
          );
          
          if (validCultures.length > 0) {
            // Combine cultures from different batches
            const existingCultureNames = new Set(combinedResult.cultures.map((c: any) => c.name));
            for (const culture of validCultures) {
              if (!existingCultureNames.has(culture.name)) {
                combinedResult.cultures.push(culture);
                existingCultureNames.add(culture.name);
              }
            }
          }
        }
        
        if (batchResult.data.historicalYears && batchResult.data.historicalYears.length > 0) {
          // Combine historical years data
          if (!combinedResult.historicalYears || combinedResult.historicalYears.length === 0) {
            combinedResult.historicalYears = batchResult.data.historicalYears;
          } else {
            // Merge historical years data if we already have some
            const existingYears = new Set(combinedResult.historicalYears.map((y: any) => y.year));
            for (const yearData of batchResult.data.historicalYears) {
              if (!existingYears.has(yearData.year)) {
                combinedResult.historicalYears.push(yearData);
                existingYears.add(yearData.year);
              }
            }
          }
        }
      }
      
      // If we have found all required information, we can stop processing
      const allRequiredDataFound = 
        combinedResult.applicantName !== "N/A" &&
        combinedResult.submitterId !== "N/A" &&
        combinedResult.applicantId !== "N/A" &&
        combinedResult.submissionDate !== "N/A" &&
        combinedResult.year !== "N/A" &&
        combinedResult.blockIds.length > 0 &&
        combinedResult.cultures.length > 0 &&
        combinedResult.hectares > 0;
        
      if (allRequiredDataFound) {
        console.log(`‚úÖ All required data found after processing ${i + 1}/${batches.length} batches. Stopping early.`);
        break;
      }
    } catch (error) {
      console.error(`‚ùå Error processing batch ${i + 1}:`, error);
      console.error(`‚ùå Error details:`, JSON.stringify(error, null, 2));
    }
  }
  
  console.log(`‚úÖ Processed ${batchInfo.processedBatches}/${batchInfo.totalBatches} batches`);
  
  return {
    data: combinedResult,
    rawText: rawText,
    claudeResponseUrl: finalClaudeResponseUrl,
    batchInfo: batchInfo
  };
};

async function processImageBatch(
  batchUrls: string[],
  userId: string,
  batchId: string,
  processingId: string,
  batchIndex: number
) {
  // Import Anthropic API client
  const API_KEY = Deno.env.get("ANTHROPIC_API_KEY");
  if (!API_KEY) {
    throw new Error("Missing ANTHROPIC_API_KEY environment variable");
  }
  
  console.log(`ü§ñ Calling Claude AI with batch ${batchIndex + 1} (${batchUrls.length} images)`);
  
  // Construct the prompt for Claude
  const imageUrlsForPrompt = batchUrls.map(url => ({
    type: "image",
    source: {
      type: "url",
      url
    }
  }));
  
  const systemPrompt = `Te egy mesters√©ges intelligencia asszisztens vagy, aki magyar SAPS (Egys√©ges Ter√ºletalap√∫ T√°mogat√°s) mez≈ëgazdas√°gi dokumentumokb√≥l struktur√°lt adatok kinyer√©s√©re specializ√°l√≥dott. Feladatod a k√©relmez≈ër≈ël, a mez≈ëgazdas√°gi blokkokr√≥l, kult√∫r√°kr√≥l, f√∂ldter√ºletekr≈ël √©s historikus n√∂v√©nytermeszt√©si adatokr√≥l az √∂sszes inform√°ci√≥ kinyer√©se.

FONTOS: Mindig az al√°bbi strukt√∫r√°j√∫, √©rv√©nyes JSON objektumot kell visszaadnod, kiz√°r√≥lag ezekkel a mez≈ëkkel:
{
  "applicantName": string,
  "submitterId": string,
  "applicantId": string,
  "documentId": string,
  "year": string,
  "submissionDate": string,
  "hectares": number,
  "cultures": [
    {
      "name": string,
      "hectares": number
    }
  ],
  "blockIds": string[],
  "historicalYears": [
    {
      "year": string,
      "totalHectares": number,
      "crops": [
        {
          "name": string,
          "hectares": number,
          "yield": number,
          "totalYield": number
        }
      ]
    }
  ]
}

R√âSZLETES UTAS√çT√ÅSOK:

## 1.1 - ALAPADATOK
Az alapadatok a SAPS dokumentum els≈ë oldal√°n tal√°lhat√≥k mindig. Itt keresd:
1. A k√©relmez≈ë nev√©t ("k√©relmez≈ë neve")
2. Az √ºgyf√©l-azonos√≠t√≥t ("√ºgyf√©l-azonos√≠t√≥" vagy "regisztr√°ci√≥s sz√°m")
3. A dokumentumazonos√≠t√≥t
4. A t√°rgy√©vet
5. A beny√∫jt√°s d√°tum√°t ("Beny√∫jt√°s d√°tuma")

## 1.2 - BLOKKOK
A blokkok a "14 Ter√ºletek √∂sszes√≠t√©se hasznos√≠t√°si adatok szerint" √©s a "16 EFA ter√ºletek √∂sszes√≠t√©se" k√∂z√∂tt tal√°lhat√≥ "15 Ter√ºletek √∂sszes√≠t√©se blokkhaszn√°lat szerint" modulban tal√°lhat√≥k. Ebben a r√©szben:
1. Keresd a blokkokat, melyek √°ltal√°ban alfanumerikus k√≥dok (pl. "C1N7J518")
2. A blokkok mellett tal√°lhat√≥k az adott k√≥djel≈± blokkhoz tart√≥ ter√ºletm√©ret hekt√°rban
3. Sz√°mold ki az √∂sszes blokk teljes ter√ºletm√©ret√©t (hekt√°r) - ezt az √©rt√©ket add meg a "blokkok √∂sszes√≠tett m√©rete" mez≈ëben
4. A teljes hekt√°rm√©ret a blokkok mellett l√©v≈ë √©rt√©kek √∂sszege

## 1.3 - HISTORIKUS ADATOK
A historikus adatokat a "10 V√°ltoz√°svezet√©s" √©s a "12 N√∂v√©nyv√©delmi szakir√°ny√≠t√≥ nyilatkozat" k√∂z√∂tt tal√°lhat√≥ "11 K√°renyh√≠t√©s/Biztos√≠t√°si d√≠jt√°mogat√°s" modulban keresd, azon bel√ºl a "Term√©smennyis√©g megad√°sa a mez≈ëgazdas√°gi termel√©st √©rint≈ë id≈ëj√°r√°si √©s m√°s term√©szeti kock√°zatok kezel√©s√©re szolg√°l√≥ rendszer keret√©ben" r√©szben:
1. Ez a t√°bl√°zat tartalmazza az elm√∫lt 5 √©v adatait - add vissza JSON-ban, hogy mely √©vek ezek
2. Minden √©vhez tartozik ter√ºlet (ha) √©s term√©s (t) adat - a sorsz√°mok mutatj√°k, hogy melyik kult√∫r√°r√≥l van sz√≥. Amennyiben a kult√∫ra (sor) √©s az "[x] √©vi
ter√ºlet(ha)" hist√≥rikus √©v metszet√©ben van egy sz√°m, az azt jelenti, hogy az adott kultur√°t ennyi hekt√°ron termesztett√©k abban az √©vben.
Amennyiben a kult√∫ra (sor) √©s az "[x] √©vi
term√©sm(t)" metszet√©ben van egy √©rt√©k, az azt jelenti, hogy az adott kult√∫r√°b√≥l ekkora mennyis√©get termeltek hekt√°ronk√©nt abban az √©vben. A kett≈ë szorzata (hekt√°r mennyis√©ge) x (term√©sm(t)) megadja, hogy adott √©vben √ñSSZESEN h√°ny tonna mennyis√©get termeltek a kult√∫r√°b√≥l. 
3. Az egyes kult√∫r√°k soronk√©nt vannak felsorolva
4. Minden kult√∫r√°n√°l meg kell vizsg√°lni, az adott √©vben (oszlopban) van-e hozz√° megfelel≈ë √©rt√©k, ak√°r a hekt√°rt, ak√°r a tonn√°t tekintve.
5. A kiolvasott adatokat json-ban kell visszaadni

## 1.4 - T√ÅRGY√âVI ADATOK (KULT√öR√ÅK)
A t√°rgy√©vi kult√∫r√°k adatai a "17 Diverzifik√°ci√≥ √∂sszes√≠t√©se" modulban tal√°lhat√≥k:
1. Itt keresd a kult√∫r√°kat √©s a hozz√°juk tartoz√≥ ter√ºleteket hekt√°rban (ha)
2. Ezeket az adatokat a "cultures" t√∂mbben add vissza
3. Minden kult√∫r√°hoz tartozik egy n√©v √©s egy ter√ºletm√©ret hekt√°rban

EGY√âB UTAS√çT√ÅSOK:
1. Ha nem tal√°lsz bizonyos inform√°ci√≥kat, haszn√°lj "N/A" √©rt√©ket sz√∂veges mez≈ëkn√©l √©s 0-t numerikus √©rt√©kekn√©l.
2. NE TAL√ÅLJ KI VAGY BECS√úLJ ADATOKAT. Ha bizonytalan vagy, haszn√°lj "N/A" vagy 0 √©rt√©ket.
3. KIZ√ÅR√ìLAG a JSON objektumot add vissza, tov√°bbi sz√∂veg vagy magyar√°zat n√©lk√ºl.
4. NE HASZN√ÅLJ hely≈ërz≈ë adatokat, mint p√©ld√°ul "Sz√°nt√≥f√∂ldi kult√∫ra" 123.45 hekt√°rral. Ha nem tudod kinyerni a val√≥s adatokat, √°ll√≠ts be √ºres t√∂mb√∂t.

FONTOS: A dokumentum magyar nyelv≈±, ez√©rt keresd ezeket a kulcsszavakat: "k√©relmez≈ë", "√ºgyf√©l-azonos√≠t√≥", "blokkazonos√≠t√≥", "hekt√°r", "ter√ºlet", "t√°rgy√©v", "beny√∫jt√°s d√°tuma", "k√°renyh√≠t√©s", stb.`;

  const userPrompt = `Nyerd ki az √∂sszes sz√ºks√©ges inform√°ci√≥t ezekb≈ël a SAPS dokumentum oldalakb√≥l. Eml√©kezz, hogy KIZ√ÅR√ìLAG a megadott strukt√∫r√°j√∫, √©rv√©nyes JSON objektumot add vissza, amely tartalmazza az √∂sszes inform√°ci√≥t, amit tal√°lsz a k√©relmez≈ër≈ël, blokkokr√≥l, f√∂ldter√ºletekr≈ël, kult√∫r√°kr√≥l, beny√∫jt√°si d√°tumr√≥l, √©vr≈ël √©s historikus n√∂v√©nytermeszt√©si adatokr√≥l.`;
  
  try {
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": API_KEY,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify({
        model: "claude-3-opus-20240229",
        max_tokens: 4000,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: [
              { type: "text", text: userPrompt },
              ...imageUrlsForPrompt
            ]
          }
        ]
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Claude API error: ${response.status} ${response.statusText}`);
      console.error(`‚ùå Error details: ${errorText}`);
      throw new Error(`Claude API error: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    const claudeResponse = await response.json();
    console.log(`‚úÖ Claude response received for batch ${batchIndex + 1}`);
    
    // Extract the content from Claude's response
    const rawText = claudeResponse.content?.[0]?.text || "";
    console.log(`Raw Claude content: ${rawText.substring(0, 100)}...`);
    
    // Try to parse the JSON response
    let extractedData;
    try {
      // Look for JSON object in the response
      const jsonMatch = rawText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        extractedData = JSON.parse(jsonMatch[0]);
        console.log(`‚úÖ Successfully parsed JSON from Claude response`);
        
        // Filter out fallback data
        if (extractedData.cultures) {
          extractedData.cultures = extractedData.cultures.filter(
            (culture: any) => !(culture.name === "Sz√°nt√≥f√∂ldi kult√∫ra" && culture.hectares === 123.45)
          );
        }
      } else {
        console.warn(`‚ö†Ô∏è No JSON object found in Claude response`);
        extractedData = null;
      }
    } catch (parseError) {
      console.error(`‚ùå Failed to parse JSON from Claude response:`, parseError);
      console.error(`‚ùå Raw text: ${rawText}`);
      extractedData = null;
    }
    
    // Return the extracted data and raw response
    return {
      data: extractedData,
      rawText: rawText,
      batchIndex: batchIndex
    };
  } catch (error) {
    console.error(`‚ùå Error calling Claude API:`, error);
    throw error;
  }
}
