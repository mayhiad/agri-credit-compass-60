
import { getErrorDetails } from "./openaiClient.ts";
import { API_TIMEOUT } from "./fetchUtils.ts";
import { uploadFileToOpenAI, saveDocumentToStorage } from "./fileUtils.ts";
import { 
  createAssistant, 
  createThread, 
  addMessageToThread, 
  startRun 
} from "./openaiAssistant.ts";

// Dokumentum feldolgoz√°sa OpenAI seg√≠ts√©g√©vel
export async function processDocumentWithOpenAI(fileBuffer: ArrayBuffer, fileName: string, userId: string) {
  console.log(`üîç Dokumentum feldolgoz√°s megkezd√©se: ${fileName}`);
  console.log(`üì¶ Dokumentum m√©rete: ${fileBuffer.byteLength} b√°jt`);
  console.log(`‚è±Ô∏è Be√°ll√≠tott API id≈ët√∫ll√©p√©s: ${API_TIMEOUT} m√°sodperc`);

  try {
    // Dokumentum ment√©se a Supabase t√°rol√≥ba
    await saveDocumentToStorage(fileBuffer, fileName, userId);
    
    // F√°jl felt√∂lt√©se OpenAI-ba
    const file = await uploadFileToOpenAI(fileBuffer, fileName);
    console.log(`‚úÖ F√°jl sikeresen felt√∂ltve OpenAI-ba. File ID: ${file.id}`);
    
    // Asszisztens l√©trehoz√°sa
    const assistant = await createAssistant();
    console.log(`‚úÖ Asszisztens sikeresen l√©trehozva. Assistant ID: ${assistant.id}`);
    
    // Thread l√©trehoz√°sa
    const thread = await createThread();
    console.log(`‚úÖ Thread sikeresen l√©trehozva. Thread ID: ${thread.id}`);
    
    // √úzenet hozz√°ad√°sa a threadhez (csak sz√∂veges utas√≠t√°ssal, f√°jl n√©lk√ºl)
    await addMessageToThread(thread.id);
    console.log(`‚úÖ √úzenet sikeresen hozz√°adva a threadhez`);
    
    // Futtat√°s ind√≠t√°sa a f√°jl hozz√°ad√°s√°val
    const run = await startRun(thread.id, assistant.id, file.id);
    console.log(`‚úÖ Futtat√°s sikeresen elind√≠tva. Run ID: ${run.id}`);

    return {
      threadId: thread.id,
      runId: run.id,
      fileId: file.id
    };

  } catch (error) {
    console.error("üö® Teljes feldolgoz√°si hiba:", getErrorDetails(error));
    throw error;
  }
}
