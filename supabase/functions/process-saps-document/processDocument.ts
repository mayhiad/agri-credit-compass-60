
import { getErrorDetails } from "./openaiClient.ts";
import { API_TIMEOUT } from "./fetchUtils.ts";
import { 
  saveDocumentToStorage, 
  extractTextFromDocument, 
  logOcrResult,
  logExtractionResult
} from "./fileUtils.ts";
import { processAllImageBatches } from "./claudeProcessor.ts";

// Dokumentum feldolgoz√°sa Claude AI seg√≠ts√©g√©vel
export async function processDocumentWithOpenAI(fileBuffer: ArrayBuffer, fileName: string, userId: string) {
  console.log(`üîç Dokumentum feldolgoz√°s megkezd√©se: ${fileName}`);
  console.log(`üì¶ Dokumentum m√©rete: ${fileBuffer.byteLength} b√°jt`);
  console.log(`‚è±Ô∏è Be√°ll√≠tott API id≈ët√∫ll√©p√©s: ${API_TIMEOUT} m√°sodperc`);
  console.log(`üë§ Feldolgoz√°st kezdem√©nyez≈ë felhaszn√°l√≥: ${userId}`);

  try {
    const processingStart = Date.now();
    
    // Dokumentum ment√©se a Supabase t√°rol√≥ba
    console.log(`üíæ Dokumentum ment√©se a Supabase t√°rol√≥ba kezd√©se...`);
    const storagePath = await saveDocumentToStorage(fileBuffer, fileName, userId);
    console.log(`‚úÖ Dokumentum ment√©se a t√°rol√≥ba ${storagePath ? 'sikeres' : 'sikertelen'}`);
    
    // Dokumentum feldolgoz√°sa Claude-dal
    console.log(`ü§ñ Dokumentum feldolgoz√°sa Claude AI-val...`);
    const result = await processAllImageBatches(
      [storagePath || fileName], // Ideiglenesen csak egy k√©p/dokumentum
      userId,
      'single-document', // Ideiglenesen egy batch ID
      crypto.randomUUID() // Gener√°lunk egy egyedi processing ID-t
    );
    console.log(`‚úÖ Claude feldolgoz√°s eredm√©nye:`, result ? "success" : "failed");
    
    // OCR eredm√©ny ment√©se az adatb√°zisba
    const ocrLogId = await logOcrResult(
      userId, 
      fileName, 
      fileBuffer.byteLength, 
      fileName.endsWith('.pdf') ? 'application/pdf' : 'application/octet-stream',
      storagePath,
      result.rawText || "No OCR text available"
    );
    
    if (!ocrLogId) {
      console.warn(`‚ö†Ô∏è Az OCR eredm√©nyek nem ker√ºltek ment√©sre az adatb√°zisba, de folytatjuk a feldolgoz√°st`);
    } else {
      console.log(`‚úÖ OCR napl√≥ sikeresen l√©trehozva: ${ocrLogId}`);
    }
    
    // AI feldolgoz√°s ind√≠t√°s√°nak napl√≥z√°sa az adatb√°zisba
    const processingTime = Date.now() - processingStart;
    if (ocrLogId) {
      // A JSON adatot szerializ√°ljuk, hogy biztosan √©rv√©nyes legyen a JSON t√≠pus
      const safeData = JSON.parse(JSON.stringify(result.data || { status: 'processing' }));
      
      await logExtractionResult(
        ocrLogId,
        userId,
        safeData,
        result.data ? 'completed' : 'in_progress',
        processingTime,
        undefined, // nincs thread_id a Claude eset√©n
        undefined  // nincs run_id a Claude eset√©n
      );
    }

    return {
      ocrLogId: ocrLogId,
      data: result.data,
      status: 'completed',
      batchInfo: result.batchInfo
    };

  } catch (error) {
    console.error("üö® Teljes feldolgoz√°si hiba:", getErrorDetails(error));
    console.error("üö® Hiba r√©szletei:", JSON.stringify(error, null, 2));
    throw error;
  }
}
