
import { getErrorDetails } from "./openaiClient.ts";
import { API_TIMEOUT } from "./fetchUtils.ts";
import { 
  saveDocumentToStorage, 
  extractTextFromDocument, 
  logOcrResult,
  logExtractionResult
} from "./fileUtils.ts";
import { 
  createAssistant, 
  createThread, 
  processDocumentText 
} from "./openaiAssistant.ts";

// Dokumentum feldolgoz√°sa OpenAI seg√≠ts√©g√©vel
export async function processDocumentWithOpenAI(fileBuffer: ArrayBuffer, fileName: string, userId: string) {
  console.log(`üîç Dokumentum feldolgoz√°s megkezd√©se: ${fileName}`);
  console.log(`üì¶ Dokumentum m√©rete: ${fileBuffer.byteLength} b√°jt`);
  console.log(`‚è±Ô∏è Be√°ll√≠tott API id≈ët√∫ll√©p√©s: ${API_TIMEOUT} m√°sodperc`);
  console.log(`üë§ Feldolgoz√°st kezdem√©nyez≈ë felhaszn√°l√≥: ${userId}`);

  try {
    const processingStart = Date.now();
    
    // Dokumentum ment√©se a Supabase t√°rol√≥ba
    console.log(`üíæ Dokumentum ment√©se a Supabase t√°rol√≥ba kezd√©se...`);
    const storagePath = await saveDocumentToStorage(fileBuffer, fileName, userId);
    console.log(`‚úÖ Dokumentum ment√©se a t√°rol√≥ba ${storagePath ? 'sikeres' : 'sikertelen'}`);
    
    // Sz√∂veg kinyer√©se a dokumentumb√≥l
    console.log(`üìÑ Sz√∂veg kinyer√©se a dokumentumb√≥l...`);
    const documentText = await extractTextFromDocument(fileBuffer, fileName);
    console.log(`‚úÖ Sz√∂veg kinyer√©se sikeres. Sz√∂veg hossza: ${documentText.length} karakter`);
    
    // F√°jl t√≠pus√°nak meghat√°roz√°sa
    const fileExtension = fileName.split('.').pop()?.toLowerCase();
    const fileType = fileExtension === 'pdf' ? 'application/pdf' : 
                   (fileExtension === 'xlsx' || fileExtension === 'xls') ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 
                   'application/octet-stream';
    
    // OCR eredm√©ny ment√©se az adatb√°zisba
    const ocrLogId = await logOcrResult(
      userId, 
      fileName, 
      fileBuffer.byteLength, 
      fileType,
      storagePath,
      documentText
    );
    
    if (!ocrLogId) {
      console.warn(`‚ö†Ô∏è Az OCR eredm√©nyek nem ker√ºltek ment√©sre az adatb√°zisba, de folytatjuk a feldolgoz√°st`);
    } else {
      console.log(`‚úÖ OCR napl√≥ sikeresen l√©trehozva: ${ocrLogId}`);
    }
    
    // Ha t√∫l r√∂vid a sz√∂veg, jelezz√ºk, hogy lehet, hogy nem siker√ºlt megfelel≈ëen kinyerni
    if (documentText.length < 100) {
      console.warn(`‚ö†Ô∏è A dokumentumb√≥l kinyert sz√∂veg nagyon r√∂vid (${documentText.length} karakter), lehet, hogy nem siker√ºlt megfelel≈ëen feldolgozni.`);
    }
    
    // Sz√∂veg els≈ë 500 karakter√©nek napl√≥z√°sa (csak a fejleszt√©s sor√°n)
    const firstChars = documentText.substring(0, 500);
    console.log(`üìù Sz√∂veg kezdete (els≈ë 500 karakter): ${firstChars}...`);
    
    // Asszisztens l√©trehoz√°sa
    console.log(`ü§ñ Asszisztens l√©trehoz√°s√°nak kezd√©se...`);
    const assistant = await createAssistant();
    console.log(`‚úÖ Asszisztens sikeresen l√©trehozva. Assistant ID: ${assistant.id}, Modell: ${assistant.model}`);
    
    // Thread l√©trehoz√°sa
    console.log(`üìù Thread l√©trehoz√°s√°nak kezd√©se...`);
    const thread = await createThread();
    console.log(`‚úÖ Thread sikeresen l√©trehozva. Thread ID: ${thread.id}`);
    
    // Sz√∂veg feldolgoz√°sa az OpenAI-val
    console.log(`üöÄ Dokumentum sz√∂veg feldolgoz√°s√°nak el≈ëk√©sz√≠t√©se a k√∂vetkez≈ë adatokkal:`);
    console.log(`    - Thread ID: ${thread.id}`);
    console.log(`    - Assistant ID: ${assistant.id}`);
    console.log(`    - Dokumentum sz√∂veg hossza: ${documentText.length} karakter`);
    
    const run = await processDocumentText(thread.id, assistant.id, documentText);
    console.log(`‚úÖ Feldolgoz√°s sikeresen elind√≠tva. Run ID: ${run.id}, St√°tusz: ${run.status}`);
    
    // AI feldolgoz√°s ind√≠t√°s√°nak napl√≥z√°sa az adatb√°zisba
    const processingTime = Date.now() - processingStart;
    if (ocrLogId) {
      await logExtractionResult(
        ocrLogId,
        userId,
        { status: 'processing' }, // Kezdeti √°llapot
        'in_progress',
        processingTime,
        thread.id,
        run.id
      );
    }

    return {
      threadId: thread.id,
      runId: run.id,
      assistantId: assistant.id,
      ocrLogId: ocrLogId
    };

  } catch (error) {
    console.error("üö® Teljes feldolgoz√°si hiba:", getErrorDetails(error));
    console.error("üö® Hiba r√©szletei:", JSON.stringify(error, null, 2));
    throw error;
  }
}
