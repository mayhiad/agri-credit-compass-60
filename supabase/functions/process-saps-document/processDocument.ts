
import { getErrorDetails } from "./openaiClient.ts";
import { API_TIMEOUT } from "./fetchUtils.ts";
import { 
  saveDocumentToStorage, 
  extractTextFromDocument, 
  logOcrResult,
  logExtractionResult,
  convertPdfFirstPageToImage
} from "./fileUtils.ts";
import { processDocumentWithClaude, processPdfPagesWithClaude } from "./claudeProcessor.ts";

// Dokumentum feldolgoz√°sa Claude AI seg√≠ts√©g√©vel
export async function processDocumentWithOpenAI(
  fileBuffer: ArrayBuffer, 
  fileName: string, 
  userId: string, 
  pdfImageBase64: string | null = null,
  pdfImagesBase64: string[] = []
) {
  console.log(`üîç Dokumentum feldolgoz√°s megkezd√©se: ${fileName}`);
  console.log(`üì¶ Dokumentum m√©rete: ${fileBuffer.byteLength} b√°jt`);
  console.log(`‚è±Ô∏è Be√°ll√≠tott API id≈ët√∫ll√©p√©s: ${API_TIMEOUT} m√°sodperc`);
  console.log(`üë§ Feldolgoz√°st kezdem√©nyez≈ë felhaszn√°l√≥: ${userId}`);

  try {
    const processingStart = Date.now();
    
    // Dokumentum ment√©se a Supabase t√°rol√≥ba
    console.log(`üíæ Dokumentum ment√©se a Supabase t√°rol√≥ba kezd√©se...`);
    const storagePath = await saveDocumentToStorage(fileBuffer, fileName, userId);
    console.log(`‚úÖ Dokumentum ment√©se a t√°rol√≥ba ${storagePath ? 'sikeres' : 'sikertelen'}`);
    
    // Ellen≈ërizz√ºk, hogy PDF f√°jl-e, √©s ha igen, van-e m√°r konvert√°lt k√©p√ºnk
    // Ha nincs el≈ëre konvert√°lt k√©p√ºnk, megpr√≥b√°ljuk itt konvert√°lni
    if (fileName.toLowerCase().endsWith('.pdf') && !pdfImageBase64) {
      console.log(`üñºÔ∏è PDF els≈ë oldal√°nak k√©pp√© konvert√°l√°sa a szerveren...`);
      pdfImageBase64 = await convertPdfFirstPageToImage(fileBuffer);
      if (pdfImageBase64) {
        console.log(`‚úÖ PDF els≈ë oldala sikeresen k√©pp√© konvert√°lva a szerveren.`);
      } else {
        console.warn(`‚ö†Ô∏è Nem siker√ºlt a PDF-et k√©pp√© konvert√°lni a szerveren.`);
      }
    }
    
    // Dokumentum feldolgoz√°sa Claude-dal
    console.log(`ü§ñ Dokumentum feldolgoz√°sa Claude AI-val...`);
    
    // T√∂bboldalas feldolgoz√°s, ha van ilyen adat
    let batchProcessingResult: string | null = null;
    if (pdfImagesBase64 && pdfImagesBase64.length > 0) {
      console.log(`üîç T√∂bboldalas PDF feldolgoz√°sa: ${pdfImagesBase64.length} oldal`);
      batchProcessingResult = await processPdfPagesWithClaude(pdfImagesBase64);
      console.log(`‚úÖ T√∂bboldalas PDF feldolgoz√°s eredm√©nye: ${batchProcessingResult ? batchProcessingResult.substring(0, 100) + '...' : 'sikertelen'}`);
    }
    
    // Egyes oldalas feldolgoz√°s (els≈ë vagy egyetlen oldal)
    const result = await processDocumentWithClaude(fileBuffer, fileName, pdfImageBase64);
    console.log(`‚úÖ Claude feldolgoz√°s eredm√©nye:`, result);
    
    // Ha van t√∂bboldalas feldolgoz√°s, hozz√°adjuk az eredm√©nyhez
    if (batchProcessingResult) {
      result.rawText = `${result.rawText || ''}\n\nT√∂bboldals feldolgoz√°s eredm√©nye:\n${batchProcessingResult}`;
      
      // Ha az egyes oldalas feldolgoz√°sb√≥l nem siker√ºlt kinyerni adatokat, pr√≥b√°ljuk a t√∂bboldalasb√≥l
      if (!result.data.submitterId || result.data.submitterId === "1234567890") {
        try {
          console.log(`üß† Pr√≥b√°lkoz√°s adatok kinyer√©s√©vel a t√∂bboldalas feldolgoz√°sb√≥l...`);
          const jsonMatch = batchProcessingResult.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const extractedData = JSON.parse(jsonMatch[0]);
            console.log(`‚úÖ Adatok kinyerve a t√∂bboldalas feldolgoz√°sb√≥l: ${JSON.stringify(extractedData)}`);
            
            // Friss√≠tj√ºk az eredm√©nyeket a t√∂bboldalas feldolgoz√°sb√≥l
            result.data.applicantName = extractedData.submitterName || result.data.applicantName;
            result.data.submitterId = extractedData.submitterId || result.data.submitterId;
            result.data.applicantId = extractedData.applicantId || result.data.applicantId;
          }
        } catch (error) {
          console.error(`‚ùå Hiba a t√∂bboldalas feldolgoz√°s adatainak kinyer√©sekor: ${error}`);
        }
      }
    }
    
    // OCR eredm√©ny ment√©se az adatb√°zisba
    const ocrLogId = await logOcrResult(
      userId, 
      fileName, 
      fileBuffer.byteLength, 
      fileName.endsWith('.pdf') ? 'application/pdf' : 'application/octet-stream',
      storagePath,
      result.rawText || "No OCR text available"
    );
    
    if (!ocrLogId) {
      console.warn(`‚ö†Ô∏è Az OCR eredm√©nyek nem ker√ºltek ment√©sre az adatb√°zisba, de folytatjuk a feldolgoz√°st`);
    } else {
      console.log(`‚úÖ OCR napl√≥ sikeresen l√©trehozva: ${ocrLogId}`);
    }
    
    // AI feldolgoz√°s ind√≠t√°s√°nak napl√≥z√°sa az adatb√°zisba
    const processingTime = Date.now() - processingStart;
    if (ocrLogId) {
      await logExtractionResult(
        ocrLogId,
        userId,
        result.data || { status: 'processing' },
        result.data ? 'completed' : 'in_progress',
        processingTime,
        undefined, // nincs thread_id a Claude eset√©n
        undefined  // nincs run_id a Claude eset√©n
      );
    }

    return {
      ocrLogId: ocrLogId,
      data: result.data,
      status: 'completed'
    };

  } catch (error) {
    console.error("üö® Teljes feldolgoz√°si hiba:", getErrorDetails(error));
    console.error("üö® Hiba r√©szletei:", JSON.stringify(error, null, 2));
    throw error;
  }
}
