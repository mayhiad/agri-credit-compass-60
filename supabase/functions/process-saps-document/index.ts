
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';
import OpenAI from 'https://esm.sh/openai@4.38.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

const supabase = createClient(supabaseUrl, supabaseServiceKey);
const openai = new OpenAI({
  apiKey: openaiApiKey,
  defaultHeaders: { 'OpenAI-Beta': 'assistants=v2' }
});

async function processDocumentWithOpenAI(fileBuffer: ArrayBuffer, fileName: string, userId: string) {
  console.log(`üîç Dokumentum feldolgoz√°s megkezd√©se: ${fileName}`);
  console.log(`üì¶ Dokumentum m√©rete: ${fileBuffer.byteLength} b√°jt`);
  console.log(`üîë OpenAI API kulcs √°llapota: ${openaiApiKey ? "be√°ll√≠tva (" + openaiApiKey.substring(0, 5) + "...)" : "hi√°nyzik"}`);

  try {
    // F√°jl felt√∂lt√©se OpenAI-ba
    console.log("üì§ K√≠s√©rlet f√°jl felt√∂lt√©s√©re az OpenAI-ba...");
    const fileUploadStart = Date.now();
    
    const file = await openai.files.create({
      file: new File([fileBuffer], fileName, { type: 'application/pdf' }),
      purpose: "assistants"
    }).catch(error => {
      console.error("‚ùå Hiba a f√°jl felt√∂lt√©se sor√°n:", JSON.stringify({
        status: error.status,
        message: error.message,
        type: error.type,
        code: error.code
      }));
      throw error;
    });
    
    const fileUploadTime = Date.now() - fileUploadStart;
    console.log(`‚úÖ F√°jl sikeresen felt√∂ltve (${fileUploadTime}ms). File ID: ${file.id}`);

    // Asszisztens l√©trehoz√°sa
    console.log("ü§ñ Asszisztens l√©trehoz√°sa...");
    const assistantStart = Date.now();
    
    const assistant = await openai.beta.assistants.create({
      name: "SAPS Dokumentum Elemz≈ë",
      instructions: `Olvasd ki a dokumentumb√≥l a k√∂vetkez≈ë mez≈ëket JSON form√°tumban:
        {
          "hectares": "√ñsszes ter√ºlet hekt√°rban",
          "cultures": [
            {
              "name": "Kult√∫ra neve",
              "hectares": "Kult√∫ra ter√ºlete",
              "estimatedRevenue": "Becs√ºlt √°rbev√©tel"
            }
          ],
          "totalRevenue": "√ñsszes becs√ºlt √°rbev√©tel",
          "region": "Gazdas√°g r√©gi√≥ja",
          "blockIds": ["Blokkazonos√≠t√≥k list√°ja"]
        }`,
      tools: [{ type: "file_search" }],
      model: "gpt-4o-mini"
    }).catch(error => {
      console.error("‚ùå Hiba az asszisztens l√©trehoz√°sa sor√°n:", JSON.stringify({
        status: error.status,
        message: error.message,
        type: error.type,
        code: error.code
      }));
      throw error;
    });
    
    const assistantTime = Date.now() - assistantStart;
    console.log(`‚úÖ Asszisztens l√©trehozva (${assistantTime}ms). ID: ${assistant.id}`);

    // Thread l√©trehoz√°sa
    console.log("üìù Thread l√©trehoz√°sa...");
    const threadStart = Date.now();
    
    const thread = await openai.beta.threads.create().catch(error => {
      console.error("‚ùå Hiba a thread l√©trehoz√°sa sor√°n:", JSON.stringify({
        status: error.status,
        message: error.message,
        type: error.type,
        code: error.code
      }));
      throw error;
    });
    
    const threadTime = Date.now() - threadStart;
    console.log(`‚úÖ Thread l√©trehozva (${threadTime}ms). ID: ${thread.id}`);
    
    // √úzenet hozz√°ad√°sa a thread-hez - a f√°jl n√©lk√ºl
    console.log(`üì§ √úzenet l√©trehoz√°sa (f√°jl hivatkoz√°s n√©lk√ºl)`);
    const messageStart = Date.now();
    
    const message = await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content: "Olvasd ki a SAPS dokumentum r√©szleteit JSON form√°tumban."
    }).catch(error => {
      console.error("‚ùå Hiba az √ºzenet l√©trehoz√°sa sor√°n:", JSON.stringify({
        status: error.status,
        message: error.message,
        type: error.type,
        code: error.code
      }));
      throw error;
    });
    
    const messageTime = Date.now() - messageStart;
    console.log(`‚úÖ √úzenet l√©trehozva (${messageTime}ms). ID: ${message.id}`);

    // Futtat√°s - a f√°jl azonos√≠t√≥t itt adjuk √°t a tool_resources-ban
    console.log(`üèÉ Feldolgoz√°s ind√≠t√°sa asszisztens ID-val: ${assistant.id} √©s f√°jl ID-val: ${file.id}`);
    const runStart = Date.now();
    
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id,
      tool_resources: {
        file_search: {
          file_ids: [file.id]
        }
      }
    }).catch(error => {
      console.error("‚ùå Hiba a futtat√°s l√©trehoz√°sa sor√°n:", JSON.stringify({
        status: error.status,
        message: error.message,
        type: error.type,
        code: error.code
      }));
      throw error;
    });
    
    const runTime = Date.now() - runStart;
    console.log(`‚úÖ Feldolgoz√°s elind√≠tva (${runTime}ms). Run ID: ${run.id}`);

    // V√°runk a befejez√©sig max 10x
    let runStatus: string;
    const maxAttempts = 10;
    let finalRunDetails: any = null;
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`‚è±Ô∏è ${attempt}. pr√≥b√°lkoz√°s a futtat√°s √°llapot√°nak ellen≈ërz√©s√©re...`);
      const statusStart = Date.now();
      
      const retrievedRun = await openai.beta.threads.runs.retrieve(
        thread.id, 
        run.id
      ).catch(error => {
        console.error(`‚ùå Hiba a ${attempt}. √°llapotellen≈ërz√©s sor√°n:`, JSON.stringify({
          status: error.status,
          message: error.message,
          type: error.type,
          code: error.code
        }));
        throw error;
      });
      
      const statusTime = Date.now() - statusStart;
      runStatus = retrievedRun.status;
      finalRunDetails = retrievedRun;
      
      console.log(`üïí ${attempt}. pr√≥b√°lkoz√°s - St√°tusz: ${runStatus} (${statusTime}ms)`);

      if (runStatus === 'completed') {
        console.log("‚úÖ Feldolgoz√°s sikeresen befejez≈ëd√∂tt!");
        break;
      }
      
      if (runStatus === 'failed') {
        console.error("‚ùå Feldolgoz√°s sikertelen", JSON.stringify(retrievedRun));
        throw new Error(`Feldolgoz√°s sikertelen: ${retrievedRun.last_error?.message}`);
      }

      if (attempt === maxAttempts) {
        console.warn(`‚ö†Ô∏è El√©rt√ºk a maximum pr√≥b√°lkoz√°sok sz√°m√°t (${maxAttempts}), de a feldolgoz√°s nem fejez≈ëd√∂tt be.`);
        console.warn("Utols√≥ ismert √°llapot:", JSON.stringify(finalRunDetails));
      }

      // 3 m√°sodperc v√°rakoz√°s a k√∂vetkez≈ë pr√≥b√°lkoz√°s el≈ëtt
      await new Promise(resolve => setTimeout(resolve, 3000));
    }

    // √úzenetek lek√©r√©se
    console.log("üì¨ √úzenetek lek√©r√©se a threadb≈ël...");
    const messagesStart = Date.now();
    
    const messages = await openai.beta.threads.messages.list(thread.id).catch(error => {
      console.error("‚ùå Hiba az √ºzenetek lek√©r√©se sor√°n:", JSON.stringify({
        status: error.status,
        message: error.message,
        type: error.type,
        code: error.code
      }));
      throw error;
    });
    
    const messagesTime = Date.now() - messagesStart;
    const assistantMessages = messages.data.filter(msg => msg.role === 'assistant');
    
    console.log(`üì¨ √ârkezett asszisztensi √ºzenetek (${messagesTime}ms): ${assistantMessages.length}`);

    // Tartalom kinyer√©se
    const extractedContent = assistantMessages
      .map(msg => msg.content[0].type === 'text' ? msg.content[0].text.value : null)
      .filter(Boolean);

    console.log("üìã Nyers kivont tartalom:", extractedContent);

    // JSON konvert√°l√°s
    const jsonData = extractedContent.reduce((acc, content) => {
      try {
        const jsonMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
        const parsedJson = jsonMatch 
          ? JSON.parse(jsonMatch[1]) 
          : JSON.parse(content);
        return { ...acc, ...parsedJson };
      } catch (parseError) {
        console.warn("‚ùó JSON parsing hiba:", parseError);
        return acc;
      }
    }, {});

    console.log("üîç Feldolgozott JSON:", jsonData);

    // Diagnosztikai adatok ment√©se
    await supabase.from('diagnostic_logs').insert({
      user_id: userId,
      file_name: fileName,
      file_size: fileBuffer.byteLength,
      extraction_data: jsonData,
      created_at: new Date().toISOString()
    });

    console.log("‚úÖ Diagnosztikai adatok sikeresen mentve");

    return jsonData;

  } catch (error) {
    console.error("üö® Teljes feldolgoz√°si hiba:", error);
    throw error;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });

  try {
    console.log("üì• K√©r√©s √©rkezett: URL:", req.url, "Met√≥dus:", req.method);
    console.log("üì§ K√©r√©s fejl√©cek:", JSON.stringify(Object.fromEntries(req.headers.entries()), null, 2));
    
    const formData = await req.formData();
    const file = formData.get('file') as File;
    
    if (!file) throw new Error('Nem √©rkezett f√°jl');

    console.log("üìÑ F√°jl fogadva:", file.name, "m√©ret:", file.size, "t√≠pus:", file.type);
    console.log("üîë OpenAI API kulcs √°llapota:", openaiApiKey ? "be√°ll√≠tva (" + openaiApiKey.substring(0, 5) + "...)" : "hi√°nyzik");

    const fileBuffer = await file.arrayBuffer();
    const processedData = await processDocumentWithOpenAI(fileBuffer, file.name, 'debug_user');

    return new Response(JSON.stringify(processedData), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
    
  } catch (error) {
    console.error("üî• V√©gs≈ë hibakezel√©s:", error);
    return new Response(JSON.stringify({ 
      error: error.message, 
      details: error.toString(),
      stack: error.stack
    }), { 
      status: 500, 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    });
  }
});
