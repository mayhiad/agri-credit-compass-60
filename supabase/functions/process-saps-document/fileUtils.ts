
import { supabase, getErrorDetails } from "./openaiClient.ts";

// Egyszer≈± PDF √©s Excel dokumentum sz√∂veg kinyer√©se
export async function extractTextFromDocument(fileBuffer: ArrayBuffer, fileName: string): Promise<string> {
  console.log(`üìÑ Sz√∂veg kinyer√©se kezd√©se: ${fileName}`);
  const extractStart = Date.now();
  
  try {
    // Alap sz√∂veget pr√≥b√°lunk kinyerni a dokumentumb√≥l
    // PDF eset√©n csak egyszer≈±en byte form√°tumb√≥l konvert√°lunk karakterk√≥dol√°ssal
    let extractedText = "";
    
    // Ellen≈ërizz√ºk a f√°jl t√≠pus√°t a neve alapj√°n
    const fileExtension = fileName.split('.').pop()?.toLowerCase();
    
    if (fileExtension === 'pdf') {
      console.log(`üìë PDF dokumentum feldolgoz√°sa...`);
      
      // Egyszer≈± PDF feldolgoz√°s - ez csak nagyon alapszint≈± sz√∂veget ad vissza
      // Val√≥s megold√°sban itt haszn√°ln√°nk egy komplexebb PDF parser-t
      const decoder = new TextDecoder('utf-8');
      try {
        extractedText = decoder.decode(fileBuffer);
      } catch (decodeError) {
        console.error(`‚ùå Hiba a PDF dek√≥dol√°sa sor√°n: ${decodeError}`);
        // Pr√≥b√°ljuk meg latin1 k√≥dol√°ssal is, ami gyakran m≈±k√∂dik az eur√≥pai nyelvekhez
        try {
          extractedText = new TextDecoder('latin1').decode(fileBuffer);
        } catch (secondDecodeError) {
          console.error(`‚ùå A m√°sodlagos dek√≥dol√°s is sikertelen: ${secondDecodeError}`);
        }
      }
      
      // Tiszt√≠tsuk meg a sz√∂veget a bin√°ris karakterekt≈ël
      extractedText = extractedText.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
      extractedText = extractedText.replace(/[^\x20-\x7E\xA0-\xFF\u0100-\u017F\u0180-\u024F\u1E00-\u1EFF]/g, ' ');
      
    } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {
      console.log(`üìä Excel dokumentum feldolgoz√°sa...`);
      
      // Excel eset√©n csak egy egyszer≈± √ºzenetet k√ºld√ºnk vissza, hogy kezelje a modellje
      extractedText = `Ez egy Excel form√°tum√∫ SAPS dokumentum. K√©rlek olvasd ki a gazd√°lkod√≥ nev√©t bel≈ële.
      Az Excel dokumentumokb√≥l nem tudunk automatikusan sz√∂veget kinyerni, k√©rlek jelezd, ha ez probl√©m√°t okoz.`;
      
    } else {
      console.log(`‚ùì Ismeretlen dokumentum t√≠pus: ${fileExtension}`);
      extractedText = `Ismeretlen dokumentum form√°tum: ${fileExtension}. 
      K√©rlek pr√≥b√°ld meg PDF vagy Excel form√°tumban felt√∂lteni a dokumentumot.`;
    }
    
    // Ellen≈ërizz√ºk a kinyert sz√∂veg m√©ret√©t
    console.log(`üìè Kinyert sz√∂veg hossza: ${extractedText.length} karakter`);
    
    if (extractedText.length < 100) {
      console.warn(`‚ö†Ô∏è A kinyert sz√∂veg nagyon r√∂vid (${extractedText.length} karakter), ez jelentheti, hogy nem siker√ºlt megfelel≈ëen kinyerni a sz√∂veget.`);
    }
    
    const extractTime = Date.now() - extractStart;
    console.log(`‚úÖ Sz√∂veg kinyer√©se befejezve (${extractTime}ms).`);
    
    return extractedText;
  } catch (error) {
    console.error(`‚ùå Hiba a sz√∂veg kinyer√©se sor√°n: ${getErrorDetails(error)}`);
    
    // Hiba eset√©n egy alap√©rtelmezett sz√∂veget adunk vissza
    return `Nem siker√ºlt kinyerni a sz√∂veget a dokumentumb√≥l. K√©rlek olvasd ki a gazd√°lkod√≥ nev√©t.`;
  }
}

// Dokumentum ment√©se a Supabase t√°rol√≥ba
export async function saveDocumentToStorage(fileBuffer: ArrayBuffer, fileName: string, userId: string) {
  try {
    console.log(`üíæ Dokumentum ment√©se a Supabase t√°rol√≥ba: ${fileName} felhaszn√°l√≥: ${userId}`);
    const saveStart = Date.now();
    
    // Valid√°ljuk a Supabase kliens √°llapot√°t
    if (!supabase || !supabase.storage) {
      console.error("‚ùå Supabase kliens nem el√©rhet≈ë vagy nincs inicializ√°lva");
      return; // Folytatjuk a feldolgoz√°st annak ellen√©re, hogy nem siker√ºlt t√°rolni
    }
    
    // Gener√°lunk egy egyedi f√°jl nevet
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileExtension = fileName.split('.').pop();
    
    // Tiszt√≠tjuk a f√°jlnevet a speci√°lis karakterekt≈ël
    const cleanFileName = fileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    const storagePath = `saps/${userId}/${timestamp}-${cleanFileName}`;
    
    console.log(`üìÅ T√°rol√°si √∫tvonal: ${storagePath}`);
    
    const { data, error } = await supabase.storage
      .from('dokumentumok')
      .upload(storagePath, fileBuffer, {
        contentType: fileExtension === 'pdf' ? 'application/pdf' : 
                    (fileExtension === 'xlsx' || fileExtension === 'xls') ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 
                    'application/octet-stream',
        upsert: false
      });
    
    if (error) {
      console.error("‚ùå Hiba a dokumentum t√°rol√°sa sor√°n:", error.message, error.details);
      console.error("‚ùå Teljes hiba: ", JSON.stringify(error, null, 2));
      // Folytatjuk a feldolgoz√°st annak ellen√©re, hogy nem siker√ºlt t√°rolni
    } else {
      const saveTime = Date.now() - saveStart;
      console.log(`‚úÖ Dokumentum sikeresen t√°rolva (${saveTime}ms). Path: ${storagePath}`);
    }
    
    return storagePath;
  } catch (storageError) {
    console.error("‚ùå V√°ratlan hiba a dokumentum t√°rol√°sa sor√°n:", getErrorDetails(storageError));
    console.error("‚ùå Teljes hiba: ", JSON.stringify(storageError, null, 2));
    // Folytatjuk a feldolgoz√°st annak ellen√©re, hogy nem siker√ºlt t√°rolni
    return null;
  }
}
