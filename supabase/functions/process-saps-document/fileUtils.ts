import { supabase, getErrorDetails } from "./openaiClient.ts";

// Egyszer≈± PDF √©s Excel dokumentum sz√∂veg kinyer√©se
export async function extractTextFromDocument(fileBuffer: ArrayBuffer, fileName: string): Promise<string> {
  console.log(`üìÑ Sz√∂veg kinyer√©se kezd√©se: ${fileName}`);
  const extractStart = Date.now();
  
  try {
    // Alap sz√∂veget pr√≥b√°lunk kinyerni a dokumentumb√≥l
    // PDF eset√©n csak egyszer≈±en byte form√°tumb√≥l konvert√°lunk karakterk√≥dol√°ssal
    let extractedText = "";
    
    // Ellen≈ërizz√ºk a f√°jl t√≠pus√°t a neve alapj√°n
    const fileExtension = fileName.split('.').pop()?.toLowerCase();
    
    if (fileExtension === 'pdf') {
      console.log(`üìë PDF dokumentum feldolgoz√°sa...`);
      
      // Egyszer≈± PDF feldolgoz√°s - ez csak nagyon alapszint≈± sz√∂veget ad vissza
      // Val√≥s megold√°sban itt haszn√°ln√°nk egy komplexebb PDF parser-t
      const decoder = new TextDecoder('utf-8');
      try {
        extractedText = decoder.decode(fileBuffer);
      } catch (decodeError) {
        console.error(`‚ùå Hiba a PDF dek√≥dol√°sa sor√°n: ${decodeError}`);
        // Pr√≥b√°ljuk meg latin1 k√≥dol√°ssal is, ami gyakran m≈±k√∂dik az eur√≥pai nyelvekhez
        try {
          extractedText = new TextDecoder('latin1').decode(fileBuffer);
        } catch (secondDecodeError) {
          console.error(`‚ùå A m√°sodlagos dek√≥dol√°s is sikertelen: ${secondDecodeError}`);
        }
      }
      
      // Tiszt√≠tsuk meg a sz√∂veget a bin√°ris karakterekt≈ël
      extractedText = extractedText.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, '');
      extractedText = extractedText.replace(/[^\x20-\x7E\xA0-\xFF\u0100-\u017F\u0180-\u024F\u1E00-\u1EFF]/g, ' ');
      
    } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {
      console.log(`üìä Excel dokumentum feldolgoz√°sa...`);
      
      // Excel eset√©n csak egy egyszer≈± √ºzenetet k√ºld√ºnk vissza, hogy kezelje a modellje
      extractedText = `Ez egy Excel form√°tum√∫ SAPS dokumentum. K√©rlek olvasd ki a gazd√°lkod√≥ nev√©t bel≈ële.
      Az Excel dokumentumokb√≥l nem tudunk automatikusan sz√∂veget kinyerni, k√©rlek jelezd, ha ez probl√©m√°t okoz.`;
      
    } else {
      console.log(`‚ùì Ismeretlen dokumentum t√≠pus: ${fileExtension}`);
      extractedText = `Ismeretlen dokumentum form√°tum: ${fileExtension}. 
      K√©rlek pr√≥b√°ld meg PDF vagy Excel form√°tumban felt√∂lteni a dokumentumot.`;
    }
    
    // R√âSZLETES NAPL√ìZ√ÅS
    console.log(`üîç TELJES KINYERT SZ√ñVEG (${extractedText.length} karakter):`);
    console.log('---START OF DOCUMENT TEXT---');
    console.log(extractedText);
    console.log('---END OF DOCUMENT TEXT---');
    
    // Kinyert sz√∂veg els≈ë √©s utols√≥ 500 karakter√©nek r√©szletez√©se
    console.log(`üìù Sz√∂veg els≈ë 500 karaktere:\n${extractedText.substring(0, 500)}`);
    console.log(`üìù Sz√∂veg utols√≥ 500 karaktere:\n${extractedText.substring(extractedText.length - 500)}`);
    
    // Sorok √©s bekezd√©sek statisztik√°i
    const lines = extractedText.split('\n');
    console.log(`üìä Dokumentum statisztik√°k:`);
    console.log(`   - Sorok sz√°ma: ${lines.length}`);
    console.log(`   - Els≈ë 5 sor:`);
    lines.slice(0, 5).forEach((line, index) => {
      console.log(`     ${index + 1}. sor: ${line}`);
    });
    
    // Ellen≈ërizz√ºk a kinyert sz√∂veg m√©ret√©t
    console.log(`üìè Kinyert sz√∂veg hossza: ${extractedText.length} karakter`);
    
    if (extractedText.length < 100) {
      console.warn(`‚ö†Ô∏è A kinyert sz√∂veg nagyon r√∂vid (${extractedText.length} karakter), ez jelentheti, hogy nem siker√ºlt megfelel≈ëen kinyerni a sz√∂veget.`);
    }
    
    const extractTime = Date.now() - extractStart;
    console.log(`‚úÖ Sz√∂veg kinyer√©se befejezve (${extractTime}ms).`);
    
    return extractedText;
  } catch (error) {
    console.error(`‚ùå Hiba a sz√∂veg kinyer√©se sor√°n: ${getErrorDetails(error)}`);
    
    // Hiba eset√©n egy alap√©rtelmezett sz√∂veget adunk vissza
    return `Nem siker√ºlt kinyerni a sz√∂veget a dokumentumb√≥l. K√©rlek olvasd ki a gazd√°lkod√≥ nev√©t.`;
  }
}

// Dokumentum OCR eredm√©ny ment√©se az adatb√°zisba
export async function logOcrResult(userId: string, fileName: string, fileSize: number, fileType: string, 
                                   storagePath: string | null, ocrContent: string): Promise<string | null> {
  try {
    console.log(`üìù OCR eredm√©nyek ment√©se az adatb√°zisba: ${fileName}`);
    
    // Valid√°ljuk a Supabase kliens √°llapot√°t
    if (!supabase) {
      console.error("‚ùå Supabase kliens nem el√©rhet≈ë vagy nincs inicializ√°lva");
      return null;
    }
    
    // Ments√ºk az OCR eredm√©nyt az adatb√°zisba
    const { data, error } = await supabase.from('document_ocr_logs')
      .insert({
        user_id: userId,
        file_name: fileName,
        file_size: fileSize,
        file_type: fileType,
        storage_path: storagePath,
        ocr_content: ocrContent
      })
      .select('id')
      .single();
    
    if (error) {
      console.error(`‚ùå Hiba az OCR eredm√©nyek ment√©sekor: ${error.message}`, error);
      return null;
    }
    
    console.log(`‚úÖ OCR eredm√©nyek sikeresen mentve. Log ID: ${data.id}`);
    return data.id;
  } catch (error) {
    console.error(`‚ùå V√°ratlan hiba az OCR eredm√©nyek ment√©se sor√°n: ${getErrorDetails(error)}`);
    return null;
  }
}

// Dokumentum ment√©se a Supabase t√°rol√≥ba
export async function saveDocumentToStorage(fileBuffer: ArrayBuffer, fileName: string, userId: string) {
  try {
    console.log(`üíæ Dokumentum ment√©se a Supabase t√°rol√≥ba: ${fileName} felhaszn√°l√≥: ${userId}`);
    const saveStart = Date.now();
    
    // Valid√°ljuk a Supabase kliens √°llapot√°t
    if (!supabase || !supabase.storage) {
      console.error("‚ùå Supabase kliens nem el√©rhet≈ë vagy nincs inicializ√°lva");
      return; // Folytatjuk a feldolgoz√°st annak ellen√©re, hogy nem siker√ºlt t√°rolni
    }
    
    // Gener√°lunk egy egyedi f√°jl nevet
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileExtension = fileName.split('.').pop();
    
    // Tiszt√≠tjuk a f√°jlnevet a speci√°lis karakterekt≈ël
    const cleanFileName = fileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    const storagePath = `saps/${userId}/${timestamp}-${cleanFileName}`;
    
    console.log(`üìÅ T√°rol√°si √∫tvonal: ${storagePath}`);
    
    const { data, error } = await supabase.storage
      .from('dokumentumok')
      .upload(storagePath, fileBuffer, {
        contentType: fileExtension === 'pdf' ? 'application/pdf' : 
                    (fileExtension === 'xlsx' || fileExtension === 'xls') ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 
                    'application/octet-stream',
        upsert: false
      });
    
    if (error) {
      console.error("‚ùå Hiba a dokumentum t√°rol√°sa sor√°n:", error.message, error.details);
      console.error("‚ùå Teljes hiba: ", JSON.stringify(error, null, 2));
      // Folytatjuk a feldolgoz√°st annak ellen√©re, hogy nem siker√ºlt t√°rolni
    } else {
      const saveTime = Date.now() - saveStart;
      console.log(`‚úÖ Dokumentum sikeresen t√°rolva (${saveTime}ms). Path: ${storagePath}`);
    }
    
    return storagePath;
  } catch (storageError) {
    console.error("‚ùå V√°ratlan hiba a dokumentum t√°rol√°sa sor√°n:", getErrorDetails(storageError));
    console.error("‚ùå Teljes hiba: ", JSON.stringify(storageError, null, 2));
    // Folytatjuk a feldolgoz√°st annak ellen√©re, hogy nem siker√ºlt t√°rolni
    return null;
  }
}

// AI feldolgoz√°si eredm√©ny ment√©se az adatb√°zisba
export async function logExtractionResult(ocrLogId: string, userId: string, extractedData: any, 
                                          processingStatus: string, processingTime: number,
                                          threadId?: string, runId?: string): Promise<string | null> {
  try {
    console.log(`üìä AI feldolgoz√°si eredm√©nyek ment√©se az adatb√°zisba. OCR Log ID: ${ocrLogId}`);
    
    // Valid√°ljuk a Supabase kliens √°llapot√°t
    if (!supabase) {
      console.error("‚ùå Supabase kliens nem el√©rhet≈ë vagy nincs inicializ√°lva");
      return null;
    }
    
    // Ments√ºk az AI feldolgoz√°si eredm√©nyt az adatb√°zisba
    const { data, error } = await supabase.from('document_extraction_results')
      .insert({
        ocr_log_id: ocrLogId,
        user_id: userId,
        extracted_data: extractedData,
        processing_status: processingStatus,
        processing_time: processingTime,
        thread_id: threadId,
        run_id: runId
      })
      .select('id')
      .single();
    
    if (error) {
      console.error(`‚ùå Hiba az AI feldolgoz√°si eredm√©nyek ment√©sekor: ${error.message}`, error);
      return null;
    }
    
    console.log(`‚úÖ AI feldolgoz√°si eredm√©nyek sikeresen mentve. Result ID: ${data.id}`);
    return data.id;
  } catch (error) {
    console.error(`‚ùå V√°ratlan hiba az AI feldolgoz√°si eredm√©nyek ment√©se sor√°n: ${getErrorDetails(error)}`);
    return null;
  }
}

// Nyers Claude v√°lasz ment√©se sz√∂veges dokumentumk√©nt
export async function saveRawClaudeResponse(
  rawResponse: string, 
  originalFileName: string, 
  userId: string,
  ocrLogId: string
): Promise<string | null> {
  try {
    console.log(`üìÑ Claude nyers v√°lasz ment√©se egyszer≈± sz√∂veges form√°tumban...`);
    
    // Valid√°ljuk a Supabase kliens √°llapot√°t
    if (!supabase || !supabase.storage) {
      console.error("‚ùå Supabase kliens nem el√©rhet≈ë vagy nincs inicializ√°lva");
      return null;
    }
    
    // Gener√°lunk egy egyedi f√°jl nevet
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const cleanFileName = originalFileName.replace(/[^a-zA-Z0-9.-]/g, '_').replace(/\.pdf$/i, '');
    const responseFileName = `claude-response-${cleanFileName}-${timestamp}.txt`;
    const storagePath = `claude-responses/${userId}/${responseFileName}`;
    
    console.log(`üìÅ Claude v√°lasz t√°rol√°si √∫tvonal: ${storagePath}`);
    
    // Mentj√ºk a sz√∂veges f√°jlt a storage-ba
    const textEncoder = new TextEncoder();
    const fileBuffer = textEncoder.encode(rawResponse);
    
    const { data, error } = await supabase.storage
      .from('dokumentumok')
      .upload(storagePath, fileBuffer, {
        contentType: 'text/plain',
        upsert: false
      });
    
    if (error) {
      console.error("‚ùå Hiba a Claude v√°lasz ment√©se sor√°n:", error.message);
      return null;
    }
    
    // Gener√°ljuk a publikus URL-t
    const { data: { publicUrl } } = supabase.storage
      .from('dokumentumok')
      .getPublicUrl(storagePath);
    
    console.log(`ÔøΩÔøΩ Claude v√°lasz sikeresen mentve: ${publicUrl}`);
    
    // Friss√≠ts√ºk az OCR logunkat a Claude v√°lasz URL-j√©vel
    if (ocrLogId) {
      const { error: updateError } = await supabase
        .from('document_ocr_logs')
        .update({
          claude_response_url: publicUrl
        })
        .eq('id', ocrLogId);
      
      if (updateError) {
        console.error("‚ùå OCR log friss√≠t√©se sikertelen:", updateError.message);
      }
    }
    
    return publicUrl;
  } catch (error) {
    console.error(`‚ùå V√°ratlan hiba a Claude v√°lasz ment√©se sor√°n: ${getErrorDetails(error)}`);
    return null;
  }
}
